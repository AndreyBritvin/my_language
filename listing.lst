     1                                  BITS 64
     2                                  section .text
     3                                  global main
     4                                  extern out
     5                                  extern hlt
     6                                  %macro XMM_POP 1
     7                                  movsd %1, [rsp]
     8                                  add rsp, 8
     9                                  %endmacro
    10                                  %macro XMM_PUSH 1
    11                                  sub rsp, 8
    12                                  movsd [rsp], %1
    13                                  %endmacro
    14                                  
    15                                  
    16                                  main:
    17 00000000 55                      push rbp
    18 00000001 4889E5                  mov rbp, rsp
    19 00000004 4883EC08                sub rsp, 8
    20 00000008 E957010000              jmp feed_END
    21                                  feed:
    22 0000000D 55                      push rbp             ; save a copy rbp
    23 0000000E 4889E5                  mov rbp, rsp
    24 00000011 4883EC08                sub rsp, 8
    25 00000015 F20F104DF8              movsd xmm1, [rbp - 8]             ; seed
    26                                  XMM_PUSH xmm1
    11 0000001A 4883EC08            <1> sub rsp, 8
    12 0000001E F20F110C24          <1> movsd [rsp], %1
    27 00000023 B800000000              mov rax, __float64__(0.000000)
    28 00000028 66480F6EC8              movq xmm1, rax
    29                                  XMM_PUSH xmm1
    11 0000002D 4883EC08            <1> sub rsp, 8
    12 00000031 F20F110C24          <1> movsd [rsp], %1
    30                                  XMM_POP xmm1
     7 00000036 F20F100C24          <1> movsd %1, [rsp]
     8 0000003B 4883C408            <1> add rsp, 8
    31                                  XMM_POP xmm2
     7 0000003F F20F101424          <1> movsd %1, [rsp]
     8 00000044 4883C408            <1> add rsp, 8
    32 00000048 660F2FD1                comisd xmm2, xmm1
    33 0000004C 7723                    ja IF_LABEL_0
    34 0000004E 48B8000000000000F0-     mov rax, __float64__(1.000000)
    34 00000057 3F                 
    35 00000058 66480F6EC8              movq xmm1, rax
    36                                  XMM_PUSH xmm1
    11 0000005D 4883EC08            <1> sub rsp, 8
    12 00000061 F20F110C24          <1> movsd [rsp], %1
    37                                  XMM_POP xmm0 ; save return value to xmm0
     7 00000066 F20F100424          <1> movsd %1, [rsp]
     8 0000006B 4883C408            <1> add rsp, 8
    38 0000006F C9                      leave
    39 00000070 C3                      ret
    40                                  
    41                                  IF_LABEL_0:
    42                                  
    43 00000071 F20F104DF8              movsd xmm1, [rbp - 8]             ; seed
    44                                  XMM_PUSH xmm1
    11 00000076 4883EC08            <1> sub rsp, 8
    12 0000007A F20F110C24          <1> movsd [rsp], %1
    45 0000007F 48B8000000000000F0-     mov rax, __float64__(1.000000)
    45 00000088 3F                 
    46 00000089 66480F6EC8              movq xmm1, rax
    47                                  XMM_PUSH xmm1
    11 0000008E 4883EC08            <1> sub rsp, 8
    12 00000092 F20F110C24          <1> movsd [rsp], %1
    48                                  XMM_POP xmm1
     7 00000097 F20F100C24          <1> movsd %1, [rsp]
     8 0000009C 4883C408            <1> add rsp, 8
    49                                  XMM_POP xmm2
     7 000000A0 F20F101424          <1> movsd %1, [rsp]
     8 000000A5 4883C408            <1> add rsp, 8
    50 000000A9 660F2FD1                comisd xmm2, xmm1
    51 000000AD 7523                    jne IF_LABEL_2
    52 000000AF 48B8000000000000F0-     mov rax, __float64__(1.000000)
    52 000000B8 3F                 
    53 000000B9 66480F6EC8              movq xmm1, rax
    54                                  XMM_PUSH xmm1
    11 000000BE 4883EC08            <1> sub rsp, 8
    12 000000C2 F20F110C24          <1> movsd [rsp], %1
    55                                  XMM_POP xmm0 ; save return value to xmm0
     7 000000C7 F20F100424          <1> movsd %1, [rsp]
     8 000000CC 4883C408            <1> add rsp, 8
    56 000000D0 C9                      leave
    57 000000D1 C3                      ret
    58                                  
    59                                  IF_LABEL_2:
    60                                  
    61 000000D2 F20F104DF8              movsd xmm1, [rbp - 8]             ; seed
    62                                  XMM_PUSH xmm1
    11 000000D7 4883EC08            <1> sub rsp, 8
    12 000000DB F20F110C24          <1> movsd [rsp], %1
    63 000000E0 F20F104DF8              movsd xmm1, [rbp - 8]             ; seed
    64                                  XMM_PUSH xmm1
    11 000000E5 4883EC08            <1> sub rsp, 8
    12 000000E9 F20F110C24          <1> movsd [rsp], %1
    65 000000EE 48B8000000000000F0-     mov rax, __float64__(1.000000)
    65 000000F7 3F                 
    66 000000F8 66480F6EC8              movq xmm1, rax
    67                                  XMM_PUSH xmm1
    11 000000FD 4883EC08            <1> sub rsp, 8
    12 00000101 F20F110C24          <1> movsd [rsp], %1
    68                                  XMM_POP xmm1
     7 00000106 F20F100C24          <1> movsd %1, [rsp]
     8 0000010B 4883C408            <1> add rsp, 8
    69                                  XMM_POP xmm2
     7 0000010F F20F101424          <1> movsd %1, [rsp]
     8 00000114 4883C408            <1> add rsp, 8
    70 00000118 F20F5CCA                subsd xmm1, xmm2
    71                                  XMM_PUSH xmm1
    11 0000011C 4883EC08            <1> sub rsp, 8
    12 00000120 F20F110C24          <1> movsd [rsp], %1
    72 00000125 4883C508                add rbp, 8
    73 00000129 8F4500                  pop qword [rbp - 0]
    74 0000012C E8DCFEFFFF              call feed
    75                                  XMM_PUSH xmm0; returned value
    11 00000131 4883EC08            <1> sub rsp, 8
    12 00000135 F20F110424          <1> movsd [rsp], %1
    76                                  XMM_POP xmm1
     7 0000013A F20F100C24          <1> movsd %1, [rsp]
     8 0000013F 4883C408            <1> add rsp, 8
    77                                  XMM_POP xmm2
     7 00000143 F20F101424          <1> movsd %1, [rsp]
     8 00000148 4883C408            <1> add rsp, 8
    78 0000014C F20F59CA                mulsd xmm1, xmm2
    79                                  XMM_PUSH xmm1
    11 00000150 4883EC08            <1> sub rsp, 8
    12 00000154 F20F110C24          <1> movsd [rsp], %1
    80                                  XMM_POP xmm0 ; save return value to xmm0
     7 00000159 F20F100424          <1> movsd %1, [rsp]
     8 0000015E 4883C408            <1> add rsp, 8
    81 00000162 C9                      leave
    82 00000163 C3                      ret
    83                                  
    84                                  feed_END:
    85                                  
    86 00000164 48B800000000000020-     mov rax, __float64__(8.000000)
    86 0000016D 40                 
    87 0000016E 66480F6EC8              movq xmm1, rax
    88                                  XMM_PUSH xmm1
    11 00000173 4883EC08            <1> sub rsp, 8
    12 00000177 F20F110C24          <1> movsd [rsp], %1
    89 0000017C 8F4500                  pop qword [rbp - 0]
    90 0000017F E889FEFFFF              call feed
    91                                  XMM_PUSH xmm0; returned value
    11 00000184 4883EC08            <1> sub rsp, 8
    12 00000188 F20F110424          <1> movsd [rsp], %1
    92                                  XMM_POP xmm0
     7 0000018D F20F100424          <1> movsd %1, [rsp]
     8 00000192 4883C408            <1> add rsp, 8
    93 00000196 4889E0                  mov rax, rsp
    94 00000199 4883E00F                and rax, 0xF
    95 0000019D 4883F808                cmp rax, 8
    96 000001A1 7504                    jne .already_aligned_0
    97 000001A3 4883EC08                sub rsp, 8
    98                                  .already_aligned_0:
    99 000001A7 E8(00000000)            call out
   100                                  ;print feed(........) 
   101                                  
   102 000001AC E8(00000000)            call hlt
   103 000001B1 4889EC                  mov rsp, rbp
   104 000001B4 5D                      pop rbp
   105 000001B5 C3                      ret
