     1                                  BITS 64
     2                                  section .text
     3                                  global main
     4                                  extern out
     5                                  extern hlt
     6                                  %macro XMM_POP 1
     7                                  movsd %1, [rsp]
     8                                  add rsp, 8
     9                                  %endmacro
    10                                  %macro XMM_PUSH 1
    11                                  sub rsp, 8
    12                                  movsd [rsp], %1
    13                                  %endmacro
    14                                  
    15                                  
    16                                  main:
    17 00000000 55                      push rbp
    18 00000001 4889E5                  mov rbp, rsp
    19 00000004 4883EC08                sub rsp, 8
    20 00000008 48B800000000000024-     mov rax, __float64__(10.000000)
    20 00000011 40                 
    21 00000012 66480F6EC8              movq xmm1, rax
    22                                  XMM_PUSH xmm1
    11 00000017 4883EC08            <1> sub rsp, 8
    12 0000001B F20F110C24          <1> movsd [rsp], %1
    23                                  XMM_POP xmm1
     7 00000020 F20F100C24          <1> movsd %1, [rsp]
     8 00000025 4883C408            <1> add rsp, 8
    24 00000029 F20F114DF8              movsd [rbp - 8], xmm1             ; first
    25                                  ;put in this ^ value: .......... 
    26                                  
    27 0000002E F20F104DF8              movsd xmm1, [rbp - 8]             ; first
    28                                  XMM_PUSH xmm1
    11 00000033 4883EC08            <1> sub rsp, 8
    12 00000037 F20F110C24          <1> movsd [rsp], %1
    29 0000003C 48B800000000000008-     mov rax, __float64__(3.000000)
    29 00000045 40                 
    30 00000046 66480F6EC8              movq xmm1, rax
    31                                  XMM_PUSH xmm1
    11 0000004B 4883EC08            <1> sub rsp, 8
    12 0000004F F20F110C24          <1> movsd [rsp], %1
    32                                  XMM_POP xmm1
     7 00000054 F20F100C24          <1> movsd %1, [rsp]
     8 00000059 4883C408            <1> add rsp, 8
    33                                  XMM_POP xmm2
     7 0000005D F20F101424          <1> movsd %1, [rsp]
     8 00000062 4883C408            <1> add rsp, 8
    34 00000066 660F2FD1                comisd xmm2, xmm1
    35 0000006A 7637                    jbe IF_LABEL_0
    36 0000006C 48B800000000000000-     mov rax, __float64__(2.000000)
    36 00000075 40                 
    37 00000076 66480F6EC8              movq xmm1, rax
    38                                  XMM_PUSH xmm1
    11 0000007B 4883EC08            <1> sub rsp, 8
    12 0000007F F20F110C24          <1> movsd [rsp], %1
    39                                  XMM_POP xmm0
     7 00000084 F20F100424          <1> movsd %1, [rsp]
     8 00000089 4883C408            <1> add rsp, 8
    40 0000008D 4889E0                  mov rax, rsp
    41 00000090 4883E00F                and rax, 0xF
    42 00000094 4883F808                cmp rax, 8
    43 00000098 7504                    jne .already_aligned_0
    44 0000009A 4883EC08                sub rsp, 8
    45                                  .already_aligned_0:
    46 0000009E E8(00000000)            call out
    47                                  ;print .. 
    48                                  
    49                                  IF_LABEL_0:
    50                                  
    51 000000A3 F20F104DF8              movsd xmm1, [rbp - 8]             ; first
    52                                  XMM_PUSH xmm1
    11 000000A8 4883EC08            <1> sub rsp, 8
    12 000000AC F20F110C24          <1> movsd [rsp], %1
    53 000000B1 48B800000000000000-     mov rax, __float64__(2.000000)
    53 000000BA 40                 
    54 000000BB 66480F6EC8              movq xmm1, rax
    55                                  XMM_PUSH xmm1
    11 000000C0 4883EC08            <1> sub rsp, 8
    12 000000C4 F20F110C24          <1> movsd [rsp], %1
    56                                  XMM_POP xmm1
     7 000000C9 F20F100C24          <1> movsd %1, [rsp]
     8 000000CE 4883C408            <1> add rsp, 8
    57                                  XMM_POP xmm2
     7 000000D2 F20F101424          <1> movsd %1, [rsp]
     8 000000D7 4883C408            <1> add rsp, 8
    58 000000DB 660F2FD1                comisd xmm2, xmm1
    59 000000DF 7337                    jae IF_LABEL_2
    60 000000E1 48B8000000000000F0-     mov rax, __float64__(1.000000)
    60 000000EA 3F                 
    61 000000EB 66480F6EC8              movq xmm1, rax
    62                                  XMM_PUSH xmm1
    11 000000F0 4883EC08            <1> sub rsp, 8
    12 000000F4 F20F110C24          <1> movsd [rsp], %1
    63                                  XMM_POP xmm0
     7 000000F9 F20F100424          <1> movsd %1, [rsp]
     8 000000FE 4883C408            <1> add rsp, 8
    64 00000102 4889E0                  mov rax, rsp
    65 00000105 4883E00F                and rax, 0xF
    66 00000109 4883F808                cmp rax, 8
    67 0000010D 7504                    jne .already_aligned_1
    68 0000010F 4883EC08                sub rsp, 8
    69                                  .already_aligned_1:
    70 00000113 E8(00000000)            call out
    71                                  ;print . 
    72                                  
    73                                  IF_LABEL_2:
    74                                  
    75 00000118 E8(00000000)            call hlt
    76 0000011D 4889EC                  mov rsp, rbp
    77 00000120 5D                      pop rbp
    78 00000121 C3                      ret
