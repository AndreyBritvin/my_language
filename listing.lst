     1                                  BITS 64
     2                                  section .text
     3                                  global main
     4                                  extern out
     5                                  extern hlt
     6                                  %macro XMM_POP 1
     7                                  movsd %1, [rsp]
     8                                  add rsp, 8
     9                                  %endmacro
    10                                  %macro XMM_PUSH 1
    11                                  sub rsp, 8
    12                                  movsd [rsp], %1
    13                                  %endmacro
    14                                  
    15                                  
    16                                  main:
    17 00000000 55                      push rbp
    18 00000001 4889E5                  mov rbp, rsp
    19 00000004 4889EB                  mov rbx, rbp
    20 00000007 4883EC18                sub rsp, 24
    21 0000000B 48B8000000000000F0-     mov rax, __float64__(1.000000)
    21 00000014 3F                 
    22 00000015 66480F6EC8              movq xmm1, rax
    23                                  XMM_PUSH xmm1
    11 0000001A 4883EC08            <1> sub rsp, 8
    12 0000001E F20F110C24          <1> movsd [rsp], %1
    24 00000023 48B8000000000000F0-     mov rax, __float64__(1.000000)
    24 0000002C 3F                 
    25 0000002D 66480F6EC8              movq xmm1, rax
    26                                  XMM_PUSH xmm1
    11 00000032 4883EC08            <1> sub rsp, 8
    12 00000036 F20F110C24          <1> movsd [rsp], %1
    27                                  XMM_POP xmm2
     7 0000003B F20F101424          <1> movsd %1, [rsp]
     8 00000040 4883C408            <1> add rsp, 8
    28                                  XMM_POP xmm1
     7 00000044 F20F100C24          <1> movsd %1, [rsp]
     8 00000049 4883C408            <1> add rsp, 8
    29 0000004D F20F5CCA                subsd xmm1, xmm2
    30                                  XMM_PUSH xmm1
    11 00000051 4883EC08            <1> sub rsp, 8
    12 00000055 F20F110C24          <1> movsd [rsp], %1
    31                                  XMM_POP xmm1
     7 0000005A F20F100C24          <1> movsd %1, [rsp]
     8 0000005F 4883C408            <1> add rsp, 8
    32 00000063 F20F114BE8              movsd [rbx - 24], xmm1             ; no_food
    33                                  ;put in this ^ value: . eat . 
    34                                  
    35 00000068 F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
    36                                  XMM_PUSH xmm1
    11 0000006D 4883EC08            <1> sub rsp, 8
    12 00000071 F20F110C24          <1> movsd [rsp], %1
    37                                  XMM_POP xmm1
     7 00000076 F20F100C24          <1> movsd %1, [rsp]
     8 0000007B 4883C408            <1> add rsp, 8
    38 0000007F F20F114BF0              movsd [rbx - 16], xmm1             ; left_wing
    39                                  ;put in this ^ value: no_food 
    40                                  
    41 00000084 F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
    42                                  XMM_PUSH xmm1
    11 00000089 4883EC08            <1> sub rsp, 8
    12 0000008D F20F110C24          <1> movsd [rsp], %1
    43                                  XMM_POP xmm1
     7 00000092 F20F100C24          <1> movsd %1, [rsp]
     8 00000097 4883C408            <1> add rsp, 8
    44 0000009B F20F114BF8              movsd [rbx - 8], xmm1             ; right_wing
    45                                  ;put in this ^ value: no_food 
    46                                  
    47 000000A0 E9D0010000              jmp fly_line_END
    48                                  
    49                                  ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- Function declaration "fly_line"
    50                                  fly_line:
    51 000000A5 55                      push rbp             ; save a copy rbp
    52 000000A6 4889E5                  mov rbp, rsp
    53 000000A9 4883EC00                sub rsp, 0
    54                                  
    55                                  ;------------BEGIN PREPARE TO IF 0-------------
    56 000000AD F20F104D18              movsd xmm1, [rbp + 8 + 16]             ; field
    57                                  XMM_PUSH xmm1
    11 000000B2 4883EC08            <1> sub rsp, 8
    12 000000B6 F20F110C24          <1> movsd [rsp], %1
    58 000000BB F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
    59                                  XMM_PUSH xmm1
    11 000000C0 4883EC08            <1> sub rsp, 8
    12 000000C4 F20F110C24          <1> movsd [rsp], %1
    60                                  
    61                                  ;-----------------BEGIN IF 0-----------------
    62                                  XMM_POP xmm1
     7 000000C9 F20F100C24          <1> movsd %1, [rsp]
     8 000000CE 4883C408            <1> add rsp, 8
    63                                  XMM_POP xmm2
     7 000000D2 F20F101424          <1> movsd %1, [rsp]
     8 000000D7 4883C408            <1> add rsp, 8
    64 000000DB 660F2FD1                comisd xmm2, xmm1
    65 000000DF 0F85DB000000            jne IF_LABEL_0
    66                                  
    67                                  ;------------BEGIN PREPARE TO IF 1-------------
    68 000000E5 F20F104D10              movsd xmm1, [rbp + 8 + 8]             ; grass
    69                                  XMM_PUSH xmm1
    11 000000EA 4883EC08            <1> sub rsp, 8
    12 000000EE F20F110C24          <1> movsd [rsp], %1
    70 000000F3 F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
    71                                  XMM_PUSH xmm1
    11 000000F8 4883EC08            <1> sub rsp, 8
    12 000000FC F20F110C24          <1> movsd [rsp], %1
    72                                  
    73                                  ;-----------------BEGIN IF 1-----------------
    74                                  XMM_POP xmm1
     7 00000101 F20F100C24          <1> movsd %1, [rsp]
     8 00000106 4883C408            <1> add rsp, 8
    75                                  XMM_POP xmm2
     7 0000010A F20F101424          <1> movsd %1, [rsp]
     8 0000010F 4883C408            <1> add rsp, 8
    76 00000113 660F2FD1                comisd xmm2, xmm1
    77 00000117 755A                    jne IF_LABEL_1
    78                                  ;                    FUNCTION EPILOGUE - return value
    79 00000119 48B800000000000010-     mov rax, __float64__(4.000000)
    79 00000122 40                 
    80 00000123 66480F6EC8              movq xmm1, rax
    81                                  XMM_PUSH xmm1
    11 00000128 4883EC08            <1> sub rsp, 8
    12 0000012C F20F110C24          <1> movsd [rsp], %1
    82 00000131 48B800000000000018-     mov rax, __float64__(6.000000)
    82 0000013A 40                 
    83 0000013B 66480F6EC8              movq xmm1, rax
    84                                  XMM_PUSH xmm1
    11 00000140 4883EC08            <1> sub rsp, 8
    12 00000144 F20F110C24          <1> movsd [rsp], %1
    85                                  XMM_POP xmm2
     7 00000149 F20F101424          <1> movsd %1, [rsp]
     8 0000014E 4883C408            <1> add rsp, 8
    86                                  XMM_POP xmm1
     7 00000152 F20F100C24          <1> movsd %1, [rsp]
     8 00000157 4883C408            <1> add rsp, 8
    87 0000015B F20F59CA                mulsd xmm1, xmm2
    88                                  XMM_PUSH xmm1
    11 0000015F 4883EC08            <1> sub rsp, 8
    12 00000163 F20F110C24          <1> movsd [rsp], %1
    89                                  XMM_POP xmm0 ; save return value to xmm0
     7 00000168 F20F100424          <1> movsd %1, [rsp]
     8 0000016D 4883C408            <1> add rsp, 8
    90 00000171 C9                      leave
    91 00000172 C3                      ret
    92                                  
    93                                  IF_LABEL_1:
    94                                  ;-------------------END IF 1------------------
    95                                  
    96                                  
    97                                  ;------------BEGIN PREPARE TO IF 3-------------
    98 00000173 F20F104D10              movsd xmm1, [rbp + 8 + 8]             ; grass
    99                                  XMM_PUSH xmm1
    11 00000178 4883EC08            <1> sub rsp, 8
    12 0000017C F20F110C24          <1> movsd [rsp], %1
   100 00000181 F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
   101                                  XMM_PUSH xmm1
    11 00000186 4883EC08            <1> sub rsp, 8
    12 0000018A F20F110C24          <1> movsd [rsp], %1
   102                                  
   103                                  ;-----------------BEGIN IF 3-----------------
   104                                  XMM_POP xmm1
     7 0000018F F20F100C24          <1> movsd %1, [rsp]
     8 00000194 4883C408            <1> add rsp, 8
   105                                  XMM_POP xmm2
     7 00000198 F20F101424          <1> movsd %1, [rsp]
     8 0000019D 4883C408            <1> add rsp, 8
   106 000001A1 660F2FD1                comisd xmm2, xmm1
   107 000001A5 7419                    je IF_LABEL_3
   108                                  ;                    FUNCTION EPILOGUE - return value
   109 000001A7 F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
   110                                  XMM_PUSH xmm1
    11 000001AC 4883EC08            <1> sub rsp, 8
    12 000001B0 F20F110C24          <1> movsd [rsp], %1
   111                                  XMM_POP xmm0 ; save return value to xmm0
     7 000001B5 F20F100424          <1> movsd %1, [rsp]
     8 000001BA 4883C408            <1> add rsp, 8
   112 000001BE C9                      leave
   113 000001BF C3                      ret
   114                                  
   115                                  IF_LABEL_3:
   116                                  ;-------------------END IF 3------------------
   117                                  
   118                                  IF_LABEL_0:
   119                                  ;-------------------END IF 0------------------
   120                                  
   121 000001C0 F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
   122                                  XMM_PUSH xmm1
    11 000001C5 4883EC08            <1> sub rsp, 8
    12 000001C9 F20F110C24          <1> movsd [rsp], %1
   123 000001CE F20F104D10              movsd xmm1, [rbp + 8 + 8]             ; grass
   124                                  XMM_PUSH xmm1
    11 000001D3 4883EC08            <1> sub rsp, 8
    12 000001D7 F20F110C24          <1> movsd [rsp], %1
   125                                  XMM_POP xmm2
     7 000001DC F20F101424          <1> movsd %1, [rsp]
     8 000001E1 4883C408            <1> add rsp, 8
   126                                  XMM_POP xmm1
     7 000001E5 F20F100C24          <1> movsd %1, [rsp]
     8 000001EA 4883C408            <1> add rsp, 8
   127 000001EE F20F5CCA                subsd xmm1, xmm2
   128                                  XMM_PUSH xmm1
    11 000001F2 4883EC08            <1> sub rsp, 8
    12 000001F6 F20F110C24          <1> movsd [rsp], %1
   129 000001FB F20F104D18              movsd xmm1, [rbp + 8 + 16]             ; field
   130                                  XMM_PUSH xmm1
    11 00000200 4883EC08            <1> sub rsp, 8
    12 00000204 F20F110C24          <1> movsd [rsp], %1
   131                                  XMM_POP xmm2
     7 00000209 F20F101424          <1> movsd %1, [rsp]
     8 0000020E 4883C408            <1> add rsp, 8
   132                                  XMM_POP xmm1
     7 00000212 F20F100C24          <1> movsd %1, [rsp]
     8 00000217 4883C408            <1> add rsp, 8
   133 0000021B F20F5ECA                divsd xmm1, xmm2
   134                                  XMM_PUSH xmm1
    11 0000021F 4883EC08            <1> sub rsp, 8
    12 00000223 F20F110C24          <1> movsd [rsp], %1
   135                                  XMM_POP xmm1
     7 00000228 F20F100C24          <1> movsd %1, [rsp]
     8 0000022D 4883C408            <1> add rsp, 8
   136 00000231 F20F114BF0              movsd [rbx - 16], xmm1             ; left_wing
   137                                  ;put in this ^ value: (no_food eat grass )overeat field 
   138                                  
   139 00000236 F20F104BF0              movsd xmm1, [rbx - 16]             ; left_wing
   140                                  XMM_PUSH xmm1
    11 0000023B 4883EC08            <1> sub rsp, 8
    12 0000023F F20F110C24          <1> movsd [rsp], %1
   141                                  XMM_POP xmm1
     7 00000244 F20F100C24          <1> movsd %1, [rsp]
     8 00000249 4883C408            <1> add rsp, 8
   142 0000024D F20F114BF8              movsd [rbx - 8], xmm1             ; right_wing
   143                                  ;put in this ^ value: left_wing 
   144                                  
   145                                  ;                    FUNCTION EPILOGUE - return value
   146 00000252 48B8000000000000F0-     mov rax, __float64__(1.000000)
   146 0000025B 3F                 
   147 0000025C 66480F6EC8              movq xmm1, rax
   148                                  XMM_PUSH xmm1
    11 00000261 4883EC08            <1> sub rsp, 8
    12 00000265 F20F110C24          <1> movsd [rsp], %1
   149                                  XMM_POP xmm0 ; save return value to xmm0
     7 0000026A F20F100424          <1> movsd %1, [rsp]
     8 0000026F 4883C408            <1> add rsp, 8
   150 00000273 C9                      leave
   151 00000274 C3                      ret
   152                                  
   153                                  fly_line_END:
   154                                  
   155                                  
   156                                  ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- Function "fly_line" END
   157 00000275 E97D060000              jmp fly_square_END
   158                                  
   159                                  ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- Function declaration "fly_square"
   160                                  fly_square:
   161 0000027A 55                      push rbp             ; save a copy rbp
   162 0000027B 4889E5                  mov rbp, rsp
   163 0000027E 4883EC08                sub rsp, 8
   164 00000282 F20F104D18              movsd xmm1, [rbp + 8 + 16]             ; beak
   165                                  XMM_PUSH xmm1
    11 00000287 4883EC08            <1> sub rsp, 8
    12 0000028B F20F110C24          <1> movsd [rsp], %1
   166 00000290 F20F104D18              movsd xmm1, [rbp + 8 + 16]             ; beak
   167                                  XMM_PUSH xmm1
    11 00000295 4883EC08            <1> sub rsp, 8
    12 00000299 F20F110C24          <1> movsd [rsp], %1
   168                                  XMM_POP xmm2
     7 0000029E F20F101424          <1> movsd %1, [rsp]
     8 000002A3 4883C408            <1> add rsp, 8
   169                                  XMM_POP xmm1
     7 000002A7 F20F100C24          <1> movsd %1, [rsp]
     8 000002AC 4883C408            <1> add rsp, 8
   170 000002B0 F20F59CA                mulsd xmm1, xmm2
   171                                  XMM_PUSH xmm1
    11 000002B4 4883EC08            <1> sub rsp, 8
    12 000002B8 F20F110C24          <1> movsd [rsp], %1
   172 000002BD 48B800000000000010-     mov rax, __float64__(4.000000)
   172 000002C6 40                 
   173 000002C7 66480F6EC8              movq xmm1, rax
   174                                  XMM_PUSH xmm1
    11 000002CC 4883EC08            <1> sub rsp, 8
    12 000002D0 F20F110C24          <1> movsd [rsp], %1
   175 000002D5 F20F104D20              movsd xmm1, [rbp + 8 + 24]             ; seed_area
   176                                  XMM_PUSH xmm1
    11 000002DA 4883EC08            <1> sub rsp, 8
    12 000002DE F20F110C24          <1> movsd [rsp], %1
   177                                  XMM_POP xmm2
     7 000002E3 F20F101424          <1> movsd %1, [rsp]
     8 000002E8 4883C408            <1> add rsp, 8
   178                                  XMM_POP xmm1
     7 000002EC F20F100C24          <1> movsd %1, [rsp]
     8 000002F1 4883C408            <1> add rsp, 8
   179 000002F5 F20F59CA                mulsd xmm1, xmm2
   180                                  XMM_PUSH xmm1
    11 000002F9 4883EC08            <1> sub rsp, 8
    12 000002FD F20F110C24          <1> movsd [rsp], %1
   181 00000302 F20F104D10              movsd xmm1, [rbp + 8 + 8]             ; feather
   182                                  XMM_PUSH xmm1
    11 00000307 4883EC08            <1> sub rsp, 8
    12 0000030B F20F110C24          <1> movsd [rsp], %1
   183                                  XMM_POP xmm2
     7 00000310 F20F101424          <1> movsd %1, [rsp]
     8 00000315 4883C408            <1> add rsp, 8
   184                                  XMM_POP xmm1
     7 00000319 F20F100C24          <1> movsd %1, [rsp]
     8 0000031E 4883C408            <1> add rsp, 8
   185 00000322 F20F59CA                mulsd xmm1, xmm2
   186                                  XMM_PUSH xmm1
    11 00000326 4883EC08            <1> sub rsp, 8
    12 0000032A F20F110C24          <1> movsd [rsp], %1
   187                                  XMM_POP xmm2
     7 0000032F F20F101424          <1> movsd %1, [rsp]
     8 00000334 4883C408            <1> add rsp, 8
   188                                  XMM_POP xmm1
     7 00000338 F20F100C24          <1> movsd %1, [rsp]
     8 0000033D 4883C408            <1> add rsp, 8
   189 00000341 F20F5CCA                subsd xmm1, xmm2
   190                                  XMM_PUSH xmm1
    11 00000345 4883EC08            <1> sub rsp, 8
    12 00000349 F20F110C24          <1> movsd [rsp], %1
   191                                  XMM_POP xmm1
     7 0000034E F20F100C24          <1> movsd %1, [rsp]
     8 00000353 4883C408            <1> add rsp, 8
   192 00000357 F20F114DF8              movsd [rbp - 8 -0], xmm1             ; parrot_discrimination
   193                                  ;put in this ^ value: beak growth beak eat .... growth seed_area growth feather 
   194                                  
   195                                  ; PREPARING FOR PRINT============
   196 0000035C F20F104DF8              movsd xmm1, [rbp - 8 -0]             ; parrot_discrimination
   197                                  XMM_PUSH xmm1
    11 00000361 4883EC08            <1> sub rsp, 8
    12 00000365 F20F110C24          <1> movsd [rsp], %1
   198                                  XMM_POP xmm0
     7 0000036A F20F100424          <1> movsd %1, [rsp]
     8 0000036F 4883C408            <1> add rsp, 8
   199                                  ;                              Aligning stack
   200 00000373 4889E0                  mov rax, rsp
   201 00000376 4883E00F                and rax, 0xF
   202 0000037A 4883F808                cmp rax, 8
   203 0000037E 7504                    jne .already_aligned_0
   204 00000380 4883EC08                sub rsp, 8
   205                                  .already_aligned_0:
   206                                  ;                              End of aligning
   207 00000384 E8(00000000)            call out
   208                                  ;print parrot_discrimination 
   209                                  ; END PRINT======================
   210                                  
   211                                  
   212                                  ;------------BEGIN PREPARE TO IF 6-------------
   213 00000389 F20F104DF8              movsd xmm1, [rbp - 8 -0]             ; parrot_discrimination
   214                                  XMM_PUSH xmm1
    11 0000038E 4883EC08            <1> sub rsp, 8
    12 00000392 F20F110C24          <1> movsd [rsp], %1
   215 00000397 F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
   216                                  XMM_PUSH xmm1
    11 0000039C 4883EC08            <1> sub rsp, 8
    12 000003A0 F20F110C24          <1> movsd [rsp], %1
   217                                  
   218                                  ;-----------------BEGIN IF 6-----------------
   219                                  XMM_POP xmm1
     7 000003A5 F20F100C24          <1> movsd %1, [rsp]
     8 000003AA 4883C408            <1> add rsp, 8
   220                                  XMM_POP xmm2
     7 000003AE F20F101424          <1> movsd %1, [rsp]
     8 000003B3 4883C408            <1> add rsp, 8
   221 000003B7 660F2FD1                comisd xmm2, xmm1
   222 000003BB 0F83CD000000            jae IF_LABEL_6
   223                                  ; PREPARING FOR PRINT============
   224 000003C1 F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
   225                                  XMM_PUSH xmm1
    11 000003C6 4883EC08            <1> sub rsp, 8
    12 000003CA F20F110C24          <1> movsd [rsp], %1
   226                                  XMM_POP xmm0
     7 000003CF F20F100424          <1> movsd %1, [rsp]
     8 000003D4 4883C408            <1> add rsp, 8
   227                                  ;                              Aligning stack
   228 000003D8 4889E0                  mov rax, rsp
   229 000003DB 4883E00F                and rax, 0xF
   230 000003DF 4883F808                cmp rax, 8
   231 000003E3 7504                    jne .already_aligned_1
   232 000003E5 4883EC08                sub rsp, 8
   233                                  .already_aligned_1:
   234                                  ;                              End of aligning
   235 000003E9 E8(00000000)            call out
   236                                  ;print no_food 
   237                                  ; END PRINT======================
   238                                  
   239                                  ; PREPARING FOR PRINT============
   240 000003EE F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
   241                                  XMM_PUSH xmm1
    11 000003F3 4883EC08            <1> sub rsp, 8
    12 000003F7 F20F110C24          <1> movsd [rsp], %1
   242                                  XMM_POP xmm0
     7 000003FC F20F100424          <1> movsd %1, [rsp]
     8 00000401 4883C408            <1> add rsp, 8
   243                                  ;                              Aligning stack
   244 00000405 4889E0                  mov rax, rsp
   245 00000408 4883E00F                and rax, 0xF
   246 0000040C 4883F808                cmp rax, 8
   247 00000410 7504                    jne .already_aligned_2
   248 00000412 4883EC08                sub rsp, 8
   249                                  .already_aligned_2:
   250                                  ;                              End of aligning
   251 00000416 E8(00000000)            call out
   252                                  ;print no_food 
   253                                  ; END PRINT======================
   254                                  
   255                                  ; PREPARING FOR PRINT============
   256 0000041B F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
   257                                  XMM_PUSH xmm1
    11 00000420 4883EC08            <1> sub rsp, 8
    12 00000424 F20F110C24          <1> movsd [rsp], %1
   258                                  XMM_POP xmm0
     7 00000429 F20F100424          <1> movsd %1, [rsp]
     8 0000042E 4883C408            <1> add rsp, 8
   259                                  ;                              Aligning stack
   260 00000432 4889E0                  mov rax, rsp
   261 00000435 4883E00F                and rax, 0xF
   262 00000439 4883F808                cmp rax, 8
   263 0000043D 7504                    jne .already_aligned_3
   264 0000043F 4883EC08                sub rsp, 8
   265                                  .already_aligned_3:
   266                                  ;                              End of aligning
   267 00000443 E8(00000000)            call out
   268                                  ;print no_food 
   269                                  ; END PRINT======================
   270                                  
   271                                  ; PREPARING FOR PRINT============
   272 00000448 F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
   273                                  XMM_PUSH xmm1
    11 0000044D 4883EC08            <1> sub rsp, 8
    12 00000451 F20F110C24          <1> movsd [rsp], %1
   274                                  XMM_POP xmm0
     7 00000456 F20F100424          <1> movsd %1, [rsp]
     8 0000045B 4883C408            <1> add rsp, 8
   275                                  ;                              Aligning stack
   276 0000045F 4889E0                  mov rax, rsp
   277 00000462 4883E00F                and rax, 0xF
   278 00000466 4883F808                cmp rax, 8
   279 0000046A 7504                    jne .already_aligned_4
   280 0000046C 4883EC08                sub rsp, 8
   281                                  .already_aligned_4:
   282                                  ;                              End of aligning
   283 00000470 E8(00000000)            call out
   284                                  ;print no_food 
   285                                  ; END PRINT======================
   286                                  
   287                                  ;                    FUNCTION EPILOGUE - return value
   288 00000475 F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
   289                                  XMM_PUSH xmm1
    11 0000047A 4883EC08            <1> sub rsp, 8
    12 0000047E F20F110C24          <1> movsd [rsp], %1
   290                                  XMM_POP xmm0 ; save return value to xmm0
     7 00000483 F20F100424          <1> movsd %1, [rsp]
     8 00000488 4883C408            <1> add rsp, 8
   291 0000048C C9                      leave
   292 0000048D C3                      ret
   293                                  
   294                                  IF_LABEL_6:
   295                                  ;-------------------END IF 6------------------
   296                                  
   297                                  
   298                                  ;------------BEGIN PREPARE TO IF 8-------------
   299 0000048E F20F104DF8              movsd xmm1, [rbp - 8 -0]             ; parrot_discrimination
   300                                  XMM_PUSH xmm1
    11 00000493 4883EC08            <1> sub rsp, 8
    12 00000497 F20F110C24          <1> movsd [rsp], %1
   301 0000049C F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
   302                                  XMM_PUSH xmm1
    11 000004A1 4883EC08            <1> sub rsp, 8
    12 000004A5 F20F110C24          <1> movsd [rsp], %1
   303                                  
   304                                  ;-----------------BEGIN IF 8-----------------
   305                                  XMM_POP xmm1
     7 000004AA F20F100C24          <1> movsd %1, [rsp]
     8 000004AF 4883C408            <1> add rsp, 8
   306                                  XMM_POP xmm2
     7 000004B3 F20F101424          <1> movsd %1, [rsp]
     8 000004B8 4883C408            <1> add rsp, 8
   307 000004BC 660F2FD1                comisd xmm2, xmm1
   308 000004C0 0F85EC000000            jne IF_LABEL_8
   309 000004C6 F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
   310                                  XMM_PUSH xmm1
    11 000004CB 4883EC08            <1> sub rsp, 8
    12 000004CF F20F110C24          <1> movsd [rsp], %1
   311 000004D4 F20F104D18              movsd xmm1, [rbp + 8 + 16]             ; beak
   312                                  XMM_PUSH xmm1
    11 000004D9 4883EC08            <1> sub rsp, 8
    12 000004DD F20F110C24          <1> movsd [rsp], %1
   313                                  XMM_POP xmm2
     7 000004E2 F20F101424          <1> movsd %1, [rsp]
     8 000004E7 4883C408            <1> add rsp, 8
   314                                  XMM_POP xmm1
     7 000004EB F20F100C24          <1> movsd %1, [rsp]
     8 000004F0 4883C408            <1> add rsp, 8
   315 000004F4 F20F5CCA                subsd xmm1, xmm2
   316                                  XMM_PUSH xmm1
    11 000004F8 4883EC08            <1> sub rsp, 8
    12 000004FC F20F110C24          <1> movsd [rsp], %1
   317 00000501 48B800000000000000-     mov rax, __float64__(2.000000)
   317 0000050A 40                 
   318 0000050B 66480F6EC8              movq xmm1, rax
   319                                  XMM_PUSH xmm1
    11 00000510 4883EC08            <1> sub rsp, 8
    12 00000514 F20F110C24          <1> movsd [rsp], %1
   320                                  XMM_POP xmm2
     7 00000519 F20F101424          <1> movsd %1, [rsp]
     8 0000051E 4883C408            <1> add rsp, 8
   321                                  XMM_POP xmm1
     7 00000522 F20F100C24          <1> movsd %1, [rsp]
     8 00000527 4883C408            <1> add rsp, 8
   322 0000052B F20F5ECA                divsd xmm1, xmm2
   323                                  XMM_PUSH xmm1
    11 0000052F 4883EC08            <1> sub rsp, 8
    12 00000533 F20F110C24          <1> movsd [rsp], %1
   324 00000538 F20F104D20              movsd xmm1, [rbp + 8 + 24]             ; seed_area
   325                                  XMM_PUSH xmm1
    11 0000053D 4883EC08            <1> sub rsp, 8
    12 00000541 F20F110C24          <1> movsd [rsp], %1
   326                                  XMM_POP xmm2
     7 00000546 F20F101424          <1> movsd %1, [rsp]
     8 0000054B 4883C408            <1> add rsp, 8
   327                                  XMM_POP xmm1
     7 0000054F F20F100C24          <1> movsd %1, [rsp]
     8 00000554 4883C408            <1> add rsp, 8
   328 00000558 F20F5ECA                divsd xmm1, xmm2
   329                                  XMM_PUSH xmm1
    11 0000055C 4883EC08            <1> sub rsp, 8
    12 00000560 F20F110C24          <1> movsd [rsp], %1
   330                                  XMM_POP xmm1
     7 00000565 F20F100C24          <1> movsd %1, [rsp]
     8 0000056A 4883C408            <1> add rsp, 8
   331 0000056E F20F114BF0              movsd [rbx - 16], xmm1             ; left_wing
   332                                  ;put in this ^ value: ((no_food eat beak )overeat .. )overeat seed_area 
   333                                  
   334 00000573 F20F104BF0              movsd xmm1, [rbx - 16]             ; left_wing
   335                                  XMM_PUSH xmm1
    11 00000578 4883EC08            <1> sub rsp, 8
    12 0000057C F20F110C24          <1> movsd [rsp], %1
   336                                  XMM_POP xmm1
     7 00000581 F20F100C24          <1> movsd %1, [rsp]
     8 00000586 4883C408            <1> add rsp, 8
   337 0000058A F20F114BF8              movsd [rbx - 8], xmm1             ; right_wing
   338                                  ;put in this ^ value: left_wing 
   339                                  
   340                                  ;                    FUNCTION EPILOGUE - return value
   341 0000058F 48B8000000000000F0-     mov rax, __float64__(1.000000)
   341 00000598 3F                 
   342 00000599 66480F6EC8              movq xmm1, rax
   343                                  XMM_PUSH xmm1
    11 0000059E 4883EC08            <1> sub rsp, 8
    12 000005A2 F20F110C24          <1> movsd [rsp], %1
   344                                  XMM_POP xmm0 ; save return value to xmm0
     7 000005A7 F20F100424          <1> movsd %1, [rsp]
     8 000005AC 4883C408            <1> add rsp, 8
   345 000005B0 C9                      leave
   346 000005B1 C3                      ret
   347                                  
   348                                  IF_LABEL_8:
   349                                  ;-------------------END IF 8------------------
   350                                  
   351                                  
   352                                  ;------------BEGIN PREPARE TO IF 10-------------
   353 000005B2 F20F104DF8              movsd xmm1, [rbp - 8 -0]             ; parrot_discrimination
   354                                  XMM_PUSH xmm1
    11 000005B7 4883EC08            <1> sub rsp, 8
    12 000005BB F20F110C24          <1> movsd [rsp], %1
   355 000005C0 F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
   356                                  XMM_PUSH xmm1
    11 000005C5 4883EC08            <1> sub rsp, 8
    12 000005C9 F20F110C24          <1> movsd [rsp], %1
   357                                  
   358                                  ;-----------------BEGIN IF 10-----------------
   359                                  XMM_POP xmm1
     7 000005CE F20F100C24          <1> movsd %1, [rsp]
     8 000005D3 4883C408            <1> add rsp, 8
   360                                  XMM_POP xmm2
     7 000005D7 F20F101424          <1> movsd %1, [rsp]
     8 000005DC 4883C408            <1> add rsp, 8
   361 000005E0 660F2FD1                comisd xmm2, xmm1
   362 000005E4 0F86B3020000            jbe IF_LABEL_10
   363 000005EA F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
   364                                  XMM_PUSH xmm1
    11 000005EF 4883EC08            <1> sub rsp, 8
    12 000005F3 F20F110C24          <1> movsd [rsp], %1
   365 000005F8 F20F104D18              movsd xmm1, [rbp + 8 + 16]             ; beak
   366                                  XMM_PUSH xmm1
    11 000005FD 4883EC08            <1> sub rsp, 8
    12 00000601 F20F110C24          <1> movsd [rsp], %1
   367                                  XMM_POP xmm2
     7 00000606 F20F101424          <1> movsd %1, [rsp]
     8 0000060B 4883C408            <1> add rsp, 8
   368                                  XMM_POP xmm1
     7 0000060F F20F100C24          <1> movsd %1, [rsp]
     8 00000614 4883C408            <1> add rsp, 8
   369 00000618 F20F5CCA                subsd xmm1, xmm2
   370                                  XMM_PUSH xmm1
    11 0000061C 4883EC08            <1> sub rsp, 8
    12 00000620 F20F110C24          <1> movsd [rsp], %1
   371 00000625 F20F104DF8              movsd xmm1, [rbp - 8 -0]             ; parrot_discrimination
   372                                  XMM_PUSH xmm1
    11 0000062A 4883EC08            <1> sub rsp, 8
    12 0000062E F20F110C24          <1> movsd [rsp], %1
   373 00000633 48B8000000000000F0-     mov rax, __float64__(1.000000)
   373 0000063C 3F                 
   374 0000063D 66480F6EC8              movq xmm1, rax
   375                                  XMM_PUSH xmm1
    11 00000642 4883EC08            <1> sub rsp, 8
    12 00000646 F20F110C24          <1> movsd [rsp], %1
   376 0000064B 48B800000000000000-     mov rax, __float64__(2.000000)
   376 00000654 40                 
   377 00000655 66480F6EC8              movq xmm1, rax
   378                                  XMM_PUSH xmm1
    11 0000065A 4883EC08            <1> sub rsp, 8
    12 0000065E F20F110C24          <1> movsd [rsp], %1
   379                                  XMM_POP xmm2
     7 00000663 F20F101424          <1> movsd %1, [rsp]
     8 00000668 4883C408            <1> add rsp, 8
   380                                  XMM_POP xmm1
     7 0000066C F20F100C24          <1> movsd %1, [rsp]
     8 00000671 4883C408            <1> add rsp, 8
   381 00000675 F20F5ECA                divsd xmm1, xmm2
   382                                  XMM_PUSH xmm1
    11 00000679 4883EC08            <1> sub rsp, 8
    12 0000067D F20F110C24          <1> movsd [rsp], %1
   383                                  XMM_POP xmm2
     7 00000682 F20F101424          <1> movsd %1, [rsp]
     8 00000687 4883C408            <1> add rsp, 8
   384                                  XMM_POP xmm1
     7 0000068B F20F100C24          <1> movsd %1, [rsp]
     8 00000690 4883C408            <1> add rsp, 8
   385 00000694 F20F51C9                sqrtsd xmm1, xmm1
   386                                  XMM_PUSH xmm1
    11 00000698 4883EC08            <1> sub rsp, 8
    12 0000069C F20F110C24          <1> movsd [rsp], %1
   387                                  XMM_POP xmm2
     7 000006A1 F20F101424          <1> movsd %1, [rsp]
     8 000006A6 4883C408            <1> add rsp, 8
   388                                  XMM_POP xmm1
     7 000006AA F20F100C24          <1> movsd %1, [rsp]
     8 000006AF 4883C408            <1> add rsp, 8
   389 000006B3 F20F58CA                addsd xmm1, xmm2
   390                                  XMM_PUSH xmm1
    11 000006B7 4883EC08            <1> sub rsp, 8
    12 000006BB F20F110C24          <1> movsd [rsp], %1
   391 000006C0 48B800000000000000-     mov rax, __float64__(2.000000)
   391 000006C9 40                 
   392 000006CA 66480F6EC8              movq xmm1, rax
   393                                  XMM_PUSH xmm1
    11 000006CF 4883EC08            <1> sub rsp, 8
    12 000006D3 F20F110C24          <1> movsd [rsp], %1
   394                                  XMM_POP xmm2
     7 000006D8 F20F101424          <1> movsd %1, [rsp]
     8 000006DD 4883C408            <1> add rsp, 8
   395                                  XMM_POP xmm1
     7 000006E1 F20F100C24          <1> movsd %1, [rsp]
     8 000006E6 4883C408            <1> add rsp, 8
   396 000006EA F20F5ECA                divsd xmm1, xmm2
   397                                  XMM_PUSH xmm1
    11 000006EE 4883EC08            <1> sub rsp, 8
    12 000006F2 F20F110C24          <1> movsd [rsp], %1
   398 000006F7 F20F104D20              movsd xmm1, [rbp + 8 + 24]             ; seed_area
   399                                  XMM_PUSH xmm1
    11 000006FC 4883EC08            <1> sub rsp, 8
    12 00000700 F20F110C24          <1> movsd [rsp], %1
   400                                  XMM_POP xmm2
     7 00000705 F20F101424          <1> movsd %1, [rsp]
     8 0000070A 4883C408            <1> add rsp, 8
   401                                  XMM_POP xmm1
     7 0000070E F20F100C24          <1> movsd %1, [rsp]
     8 00000713 4883C408            <1> add rsp, 8
   402 00000717 F20F5ECA                divsd xmm1, xmm2
   403                                  XMM_PUSH xmm1
    11 0000071B 4883EC08            <1> sub rsp, 8
    12 0000071F F20F110C24          <1> movsd [rsp], %1
   404                                  XMM_POP xmm1
     7 00000724 F20F100C24          <1> movsd %1, [rsp]
     8 00000729 4883C408            <1> add rsp, 8
   405 0000072D F20F114BF0              movsd [rbx - 16], xmm1             ; left_wing
   406                                  ;put in this ^ value: ((no_food eat beak regurgitation parrot_discrimination uncontrolable_growth (. overeat .. ))overeat .. )overeat seed_area 
   407                                  
   408 00000732 F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
   409                                  XMM_PUSH xmm1
    11 00000737 4883EC08            <1> sub rsp, 8
    12 0000073B F20F110C24          <1> movsd [rsp], %1
   410 00000740 F20F104D18              movsd xmm1, [rbp + 8 + 16]             ; beak
   411                                  XMM_PUSH xmm1
    11 00000745 4883EC08            <1> sub rsp, 8
    12 00000749 F20F110C24          <1> movsd [rsp], %1
   412                                  XMM_POP xmm2
     7 0000074E F20F101424          <1> movsd %1, [rsp]
     8 00000753 4883C408            <1> add rsp, 8
   413                                  XMM_POP xmm1
     7 00000757 F20F100C24          <1> movsd %1, [rsp]
     8 0000075C 4883C408            <1> add rsp, 8
   414 00000760 F20F5CCA                subsd xmm1, xmm2
   415                                  XMM_PUSH xmm1
    11 00000764 4883EC08            <1> sub rsp, 8
    12 00000768 F20F110C24          <1> movsd [rsp], %1
   416 0000076D F20F104DF8              movsd xmm1, [rbp - 8 -0]             ; parrot_discrimination
   417                                  XMM_PUSH xmm1
    11 00000772 4883EC08            <1> sub rsp, 8
    12 00000776 F20F110C24          <1> movsd [rsp], %1
   418 0000077B 48B8000000000000F0-     mov rax, __float64__(1.000000)
   418 00000784 3F                 
   419 00000785 66480F6EC8              movq xmm1, rax
   420                                  XMM_PUSH xmm1
    11 0000078A 4883EC08            <1> sub rsp, 8
    12 0000078E F20F110C24          <1> movsd [rsp], %1
   421 00000793 48B800000000000000-     mov rax, __float64__(2.000000)
   421 0000079C 40                 
   422 0000079D 66480F6EC8              movq xmm1, rax
   423                                  XMM_PUSH xmm1
    11 000007A2 4883EC08            <1> sub rsp, 8
    12 000007A6 F20F110C24          <1> movsd [rsp], %1
   424                                  XMM_POP xmm2
     7 000007AB F20F101424          <1> movsd %1, [rsp]
     8 000007B0 4883C408            <1> add rsp, 8
   425                                  XMM_POP xmm1
     7 000007B4 F20F100C24          <1> movsd %1, [rsp]
     8 000007B9 4883C408            <1> add rsp, 8
   426 000007BD F20F5ECA                divsd xmm1, xmm2
   427                                  XMM_PUSH xmm1
    11 000007C1 4883EC08            <1> sub rsp, 8
    12 000007C5 F20F110C24          <1> movsd [rsp], %1
   428                                  XMM_POP xmm2
     7 000007CA F20F101424          <1> movsd %1, [rsp]
     8 000007CF 4883C408            <1> add rsp, 8
   429                                  XMM_POP xmm1
     7 000007D3 F20F100C24          <1> movsd %1, [rsp]
     8 000007D8 4883C408            <1> add rsp, 8
   430 000007DC F20F51C9                sqrtsd xmm1, xmm1
   431                                  XMM_PUSH xmm1
    11 000007E0 4883EC08            <1> sub rsp, 8
    12 000007E4 F20F110C24          <1> movsd [rsp], %1
   432                                  XMM_POP xmm2
     7 000007E9 F20F101424          <1> movsd %1, [rsp]
     8 000007EE 4883C408            <1> add rsp, 8
   433                                  XMM_POP xmm1
     7 000007F2 F20F100C24          <1> movsd %1, [rsp]
     8 000007F7 4883C408            <1> add rsp, 8
   434 000007FB F20F5CCA                subsd xmm1, xmm2
   435                                  XMM_PUSH xmm1
    11 000007FF 4883EC08            <1> sub rsp, 8
    12 00000803 F20F110C24          <1> movsd [rsp], %1
   436 00000808 48B800000000000000-     mov rax, __float64__(2.000000)
   436 00000811 40                 
   437 00000812 66480F6EC8              movq xmm1, rax
   438                                  XMM_PUSH xmm1
    11 00000817 4883EC08            <1> sub rsp, 8
    12 0000081B F20F110C24          <1> movsd [rsp], %1
   439                                  XMM_POP xmm2
     7 00000820 F20F101424          <1> movsd %1, [rsp]
     8 00000825 4883C408            <1> add rsp, 8
   440                                  XMM_POP xmm1
     7 00000829 F20F100C24          <1> movsd %1, [rsp]
     8 0000082E 4883C408            <1> add rsp, 8
   441 00000832 F20F5ECA                divsd xmm1, xmm2
   442                                  XMM_PUSH xmm1
    11 00000836 4883EC08            <1> sub rsp, 8
    12 0000083A F20F110C24          <1> movsd [rsp], %1
   443 0000083F F20F104D20              movsd xmm1, [rbp + 8 + 24]             ; seed_area
   444                                  XMM_PUSH xmm1
    11 00000844 4883EC08            <1> sub rsp, 8
    12 00000848 F20F110C24          <1> movsd [rsp], %1
   445                                  XMM_POP xmm2
     7 0000084D F20F101424          <1> movsd %1, [rsp]
     8 00000852 4883C408            <1> add rsp, 8
   446                                  XMM_POP xmm1
     7 00000856 F20F100C24          <1> movsd %1, [rsp]
     8 0000085B 4883C408            <1> add rsp, 8
   447 0000085F F20F5ECA                divsd xmm1, xmm2
   448                                  XMM_PUSH xmm1
    11 00000863 4883EC08            <1> sub rsp, 8
    12 00000867 F20F110C24          <1> movsd [rsp], %1
   449                                  XMM_POP xmm1
     7 0000086C F20F100C24          <1> movsd %1, [rsp]
     8 00000871 4883C408            <1> add rsp, 8
   450 00000875 F20F114BF8              movsd [rbx - 8], xmm1             ; right_wing
   451                                  ;put in this ^ value: ((no_food eat beak eat parrot_discrimination uncontrolable_growth (. overeat .. ))overeat .. )overeat seed_area 
   452                                  
   453                                  ;                    FUNCTION EPILOGUE - return value
   454 0000087A 48B800000000000000-     mov rax, __float64__(2.000000)
   454 00000883 40                 
   455 00000884 66480F6EC8              movq xmm1, rax
   456                                  XMM_PUSH xmm1
    11 00000889 4883EC08            <1> sub rsp, 8
    12 0000088D F20F110C24          <1> movsd [rsp], %1
   457                                  XMM_POP xmm0 ; save return value to xmm0
     7 00000892 F20F100424          <1> movsd %1, [rsp]
     8 00000897 4883C408            <1> add rsp, 8
   458 0000089B C9                      leave
   459 0000089C C3                      ret
   460                                  
   461                                  IF_LABEL_10:
   462                                  ;-------------------END IF 10------------------
   463                                  
   464                                  ;                    FUNCTION EPILOGUE - return value
   465 0000089D 48B800000000000008-     mov rax, __float64__(3.000000)
   465 000008A6 40                 
   466 000008A7 66480F6EC8              movq xmm1, rax
   467                                  XMM_PUSH xmm1
    11 000008AC 4883EC08            <1> sub rsp, 8
    12 000008B0 F20F110C24          <1> movsd [rsp], %1
   468 000008B5 48B800000000000010-     mov rax, __float64__(4.000000)
   468 000008BE 40                 
   469 000008BF 66480F6EC8              movq xmm1, rax
   470                                  XMM_PUSH xmm1
    11 000008C4 4883EC08            <1> sub rsp, 8
    12 000008C8 F20F110C24          <1> movsd [rsp], %1
   471                                  XMM_POP xmm2
     7 000008CD F20F101424          <1> movsd %1, [rsp]
     8 000008D2 4883C408            <1> add rsp, 8
   472                                  XMM_POP xmm1
     7 000008D6 F20F100C24          <1> movsd %1, [rsp]
     8 000008DB 4883C408            <1> add rsp, 8
   473 000008DF F20F59CA                mulsd xmm1, xmm2
   474                                  XMM_PUSH xmm1
    11 000008E3 4883EC08            <1> sub rsp, 8
    12 000008E7 F20F110C24          <1> movsd [rsp], %1
   475                                  XMM_POP xmm0 ; save return value to xmm0
     7 000008EC F20F100424          <1> movsd %1, [rsp]
     8 000008F1 4883C408            <1> add rsp, 8
   476 000008F5 C9                      leave
   477 000008F6 C3                      ret
   478                                  
   479                                  fly_square_END:
   480                                  
   481                                  
   482                                  ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- Function "fly_square" END
   483 000008F7 E962010000              jmp prepare_for_flight_END
   484                                  
   485                                  ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- Function declaration "prepare_for_flight"
   486                                  prepare_for_flight:
   487 000008FC 55                      push rbp             ; save a copy rbp
   488 000008FD 4889E5                  mov rbp, rsp
   489 00000900 4883EC00                sub rsp, 0
   490                                  
   491                                  ;------------BEGIN PREPARE TO IF 12-------------
   492 00000904 F20F104D20              movsd xmm1, [rbp + 8 + 24]             ; bowl
   493                                  XMM_PUSH xmm1
    11 00000909 4883EC08            <1> sub rsp, 8
    12 0000090D F20F110C24          <1> movsd [rsp], %1
   494 00000912 B800000000              mov rax, __float64__(0.000000)
   495 00000917 66480F6EC8              movq xmm1, rax
   496                                  XMM_PUSH xmm1
    11 0000091C 4883EC08            <1> sub rsp, 8
    12 00000920 F20F110C24          <1> movsd [rsp], %1
   497                                  
   498                                  ;-----------------BEGIN IF 12-----------------
   499                                  XMM_POP xmm1
     7 00000925 F20F100C24          <1> movsd %1, [rsp]
     8 0000092A 4883C408            <1> add rsp, 8
   500                                  XMM_POP xmm2
     7 0000092E F20F101424          <1> movsd %1, [rsp]
     8 00000933 4883C408            <1> add rsp, 8
   501 00000937 660F2FD1                comisd xmm2, xmm1
   502 0000093B 7547                    jne IF_LABEL_12
   503                                  ;                    FUNCTION EPILOGUE - return value
   504 0000093D F20F104D20              movsd xmm1, [rbp + 8 + 24]             ; bowl
   505                                  XMM_PUSH xmm1
    11 00000942 4883EC08            <1> sub rsp, 8
    12 00000946 F20F110C24          <1> movsd [rsp], %1
   506 0000094B F20F104D18              movsd xmm1, [rbp + 8 + 16]             ; secret
   507                                  XMM_PUSH xmm1
    11 00000950 4883EC08            <1> sub rsp, 8
    12 00000954 F20F110C24          <1> movsd [rsp], %1
   508 00000959 F20F104D10              movsd xmm1, [rbp + 8 + 8]             ; ZOB
   509                                  XMM_PUSH xmm1
    11 0000095E 4883EC08            <1> sub rsp, 8
    12 00000962 F20F110C24          <1> movsd [rsp], %1
   510 00000967 E839F7FFFF              call fly_line
   511                                  ;                                    Restore stack by amount of parametrs
   512 0000096C 4883C418                add rsp, 24
   513                                  XMM_PUSH xmm0; returned value
    11 00000970 4883EC08            <1> sub rsp, 8
    12 00000974 F20F110424          <1> movsd [rsp], %1
   514                                  ;                                    Stack restored
   515                                  XMM_POP xmm0 ; save return value to xmm0
     7 00000979 F20F100424          <1> movsd %1, [rsp]
     8 0000097E 4883C408            <1> add rsp, 8
   516 00000982 C9                      leave
   517 00000983 C3                      ret
   518                                  
   519                                  IF_LABEL_12:
   520                                  ;-------------------END IF 12------------------
   521                                  
   522                                  
   523                                  ;------------BEGIN PREPARE TO IF 14-------------
   524 00000984 F20F104D20              movsd xmm1, [rbp + 8 + 24]             ; bowl
   525                                  XMM_PUSH xmm1
    11 00000989 4883EC08            <1> sub rsp, 8
    12 0000098D F20F110C24          <1> movsd [rsp], %1
   526 00000992 B800000000              mov rax, __float64__(0.000000)
   527 00000997 66480F6EC8              movq xmm1, rax
   528                                  XMM_PUSH xmm1
    11 0000099C 4883EC08            <1> sub rsp, 8
    12 000009A0 F20F110C24          <1> movsd [rsp], %1
   529                                  
   530                                  ;-----------------BEGIN IF 14-----------------
   531                                  XMM_POP xmm1
     7 000009A5 F20F100C24          <1> movsd %1, [rsp]
     8 000009AA 4883C408            <1> add rsp, 8
   532                                  XMM_POP xmm2
     7 000009AE F20F101424          <1> movsd %1, [rsp]
     8 000009B3 4883C408            <1> add rsp, 8
   533 000009B7 660F2FD1                comisd xmm2, xmm1
   534 000009BB 7447                    je IF_LABEL_14
   535                                  ;                    FUNCTION EPILOGUE - return value
   536 000009BD F20F104D20              movsd xmm1, [rbp + 8 + 24]             ; bowl
   537                                  XMM_PUSH xmm1
    11 000009C2 4883EC08            <1> sub rsp, 8
    12 000009C6 F20F110C24          <1> movsd [rsp], %1
   538 000009CB F20F104D18              movsd xmm1, [rbp + 8 + 16]             ; secret
   539                                  XMM_PUSH xmm1
    11 000009D0 4883EC08            <1> sub rsp, 8
    12 000009D4 F20F110C24          <1> movsd [rsp], %1
   540 000009D9 F20F104D10              movsd xmm1, [rbp + 8 + 8]             ; ZOB
   541                                  XMM_PUSH xmm1
    11 000009DE 4883EC08            <1> sub rsp, 8
    12 000009E2 F20F110C24          <1> movsd [rsp], %1
   542 000009E7 E88EF8FFFF              call fly_square
   543                                  ;                                    Restore stack by amount of parametrs
   544 000009EC 4883C418                add rsp, 24
   545                                  XMM_PUSH xmm0; returned value
    11 000009F0 4883EC08            <1> sub rsp, 8
    12 000009F4 F20F110424          <1> movsd [rsp], %1
   546                                  ;                                    Stack restored
   547                                  XMM_POP xmm0 ; save return value to xmm0
     7 000009F9 F20F100424          <1> movsd %1, [rsp]
     8 000009FE 4883C408            <1> add rsp, 8
   548 00000A02 C9                      leave
   549 00000A03 C3                      ret
   550                                  
   551                                  IF_LABEL_14:
   552                                  ;-------------------END IF 14------------------
   553                                  
   554                                  ;                    FUNCTION EPILOGUE - return value
   555 00000A04 48B800000000000010-     mov rax, __float64__(4.000000)
   555 00000A0D 40                 
   556 00000A0E 66480F6EC8              movq xmm1, rax
   557                                  XMM_PUSH xmm1
    11 00000A13 4883EC08            <1> sub rsp, 8
    12 00000A17 F20F110C24          <1> movsd [rsp], %1
   558 00000A1C 48B800000000000014-     mov rax, __float64__(5.000000)
   558 00000A25 40                 
   559 00000A26 66480F6EC8              movq xmm1, rax
   560                                  XMM_PUSH xmm1
    11 00000A2B 4883EC08            <1> sub rsp, 8
    12 00000A2F F20F110C24          <1> movsd [rsp], %1
   561                                  XMM_POP xmm2
     7 00000A34 F20F101424          <1> movsd %1, [rsp]
     8 00000A39 4883C408            <1> add rsp, 8
   562                                  XMM_POP xmm1
     7 00000A3D F20F100C24          <1> movsd %1, [rsp]
     8 00000A42 4883C408            <1> add rsp, 8
   563 00000A46 F20F59CA                mulsd xmm1, xmm2
   564                                  XMM_PUSH xmm1
    11 00000A4A 4883EC08            <1> sub rsp, 8
    12 00000A4E F20F110C24          <1> movsd [rsp], %1
   565                                  XMM_POP xmm0 ; save return value to xmm0
     7 00000A53 F20F100424          <1> movsd %1, [rsp]
     8 00000A58 4883C408            <1> add rsp, 8
   566 00000A5C C9                      leave
   567 00000A5D C3                      ret
   568                                  
   569                                  prepare_for_flight_END:
   570                                  
   571                                  
   572                                  ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- Function "prepare_for_flight" END
   573                                  ; PREPARING FOR PRINT============
   574 00000A5E 48B8000000000000F0-     mov rax, __float64__(1.000000)
   574 00000A67 3F                 
   575 00000A68 66480F6EC8              movq xmm1, rax
   576                                  XMM_PUSH xmm1
    11 00000A6D 4883EC08            <1> sub rsp, 8
    12 00000A71 F20F110C24          <1> movsd [rsp], %1
   577 00000A76 F20F104BE8              movsd xmm1, [rbx - 24]             ; no_food
   578                                  XMM_PUSH xmm1
    11 00000A7B 4883EC08            <1> sub rsp, 8
    12 00000A7F F20F110C24          <1> movsd [rsp], %1
   579 00000A84 48B8000000000000F0-     mov rax, __float64__(1.000000)
   579 00000A8D 3F                 
   580 00000A8E 66480F6EC8              movq xmm1, rax
   581                                  XMM_PUSH xmm1
    11 00000A93 4883EC08            <1> sub rsp, 8
    12 00000A97 F20F110C24          <1> movsd [rsp], %1
   582 00000A9C E85BFEFFFF              call prepare_for_flight
   583                                  ;                                    Restore stack by amount of parametrs
   584 00000AA1 4883C418                add rsp, 24
   585                                  XMM_PUSH xmm0; returned value
    11 00000AA5 4883EC08            <1> sub rsp, 8
    12 00000AA9 F20F110424          <1> movsd [rsp], %1
   586                                  ;                                    Stack restored
   587                                  XMM_POP xmm0
     7 00000AAE F20F100424          <1> movsd %1, [rsp]
     8 00000AB3 4883C408            <1> add rsp, 8
   588                                  ;                              Aligning stack
   589 00000AB7 4889E0                  mov rax, rsp
   590 00000ABA 4883E00F                and rax, 0xF
   591 00000ABE 4883F808                cmp rax, 8
   592 00000AC2 7504                    jne .already_aligned_5
   593 00000AC4 4883EC08                sub rsp, 8
   594                                  .already_aligned_5:
   595                                  ;                              End of aligning
   596 00000AC8 E8(00000000)            call out
   597                                  ;print prepare_for_flight(., no_food, .) 
   598                                  ; END PRINT======================
   599                                  
   600                                  ; PREPARING FOR PRINT============
   601 00000ACD F20F104BF0              movsd xmm1, [rbx - 16]             ; left_wing
   602                                  XMM_PUSH xmm1
    11 00000AD2 4883EC08            <1> sub rsp, 8
    12 00000AD6 F20F110C24          <1> movsd [rsp], %1
   603                                  XMM_POP xmm0
     7 00000ADB F20F100424          <1> movsd %1, [rsp]
     8 00000AE0 4883C408            <1> add rsp, 8
   604                                  ;                              Aligning stack
   605 00000AE4 4889E0                  mov rax, rsp
   606 00000AE7 4883E00F                and rax, 0xF
   607 00000AEB 4883F808                cmp rax, 8
   608 00000AEF 7504                    jne .already_aligned_6
   609 00000AF1 4883EC08                sub rsp, 8
   610                                  .already_aligned_6:
   611                                  ;                              End of aligning
   612 00000AF5 E8(00000000)            call out
   613                                  ;print left_wing 
   614                                  ; END PRINT======================
   615                                  
   616                                  ; PREPARING FOR PRINT============
   617 00000AFA F20F104BF8              movsd xmm1, [rbx - 8]             ; right_wing
   618                                  XMM_PUSH xmm1
    11 00000AFF 4883EC08            <1> sub rsp, 8
    12 00000B03 F20F110C24          <1> movsd [rsp], %1
   619                                  XMM_POP xmm0
     7 00000B08 F20F100424          <1> movsd %1, [rsp]
     8 00000B0D 4883C408            <1> add rsp, 8
   620                                  ;                              Aligning stack
   621 00000B11 4889E0                  mov rax, rsp
   622 00000B14 4883E00F                and rax, 0xF
   623 00000B18 4883F808                cmp rax, 8
   624 00000B1C 7504                    jne .already_aligned_7
   625 00000B1E 4883EC08                sub rsp, 8
   626                                  .already_aligned_7:
   627                                  ;                              End of aligning
   628 00000B22 E8(00000000)            call out
   629                                  ;print right_wing 
   630                                  ; END PRINT======================
   631                                  
   632 00000B27 E8(00000000)            call hlt
   633 00000B2C 4889EC                  mov rsp, rbp
   634 00000B2F 5D                      pop rbp
   635 00000B30 C3                      ret
