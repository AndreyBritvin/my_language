     1                                  BITS 64
     2                                  section .text
     3                                  global main
     4                                  extern out
     5                                  extern hlt
     6                                  %macro XMM_POP 1
     7                                  movsd %1, [rsp]
     8                                  add rsp, 8
     9                                  %endmacro
    10                                  %macro XMM_PUSH 1
    11                                  sub rsp, 8
    12                                  movsd [rsp], %1
    13                                  %endmacro
    14                                  
    15                                  
    16                                  main:
    17 00000000 55                      push rbp
    18 00000001 4889E5                  mov rbp, rsp
    19 00000004 4889EB                  mov rbx, rbp
    20 00000007 4883EC00                sub rsp, 0
    21 0000000B E9F8000000              jmp feed_END
    22                                  feed:
    23 00000010 55                      push rbp             ; save a copy rbp
    24 00000011 4889E5                  mov rbp, rsp
    25 00000014 4883EC00                sub rsp, 0
    26 00000018 F20F104D10              movsd xmm1, [rbp + 8 + 8]             ; seed
    27                                  XMM_PUSH xmm1
    11 0000001D 4883EC08            <1> sub rsp, 8
    12 00000021 F20F110C24          <1> movsd [rsp], %1
    28 00000026 48B8000000000000F0-     mov rax, __float64__(1.000000)
    28 0000002F 3F                 
    29 00000030 66480F6EC8              movq xmm1, rax
    30                                  XMM_PUSH xmm1
    11 00000035 4883EC08            <1> sub rsp, 8
    12 00000039 F20F110C24          <1> movsd [rsp], %1
    31                                  XMM_POP xmm1
     7 0000003E F20F100C24          <1> movsd %1, [rsp]
     8 00000043 4883C408            <1> add rsp, 8
    32                                  XMM_POP xmm2
     7 00000047 F20F101424          <1> movsd %1, [rsp]
     8 0000004C 4883C408            <1> add rsp, 8
    33 00000050 660F2FD1                comisd xmm2, xmm1
    34 00000054 7723                    ja IF_LABEL_0
    35 00000056 48B8000000000000F0-     mov rax, __float64__(1.000000)
    35 0000005F 3F                 
    36 00000060 66480F6EC8              movq xmm1, rax
    37                                  XMM_PUSH xmm1
    11 00000065 4883EC08            <1> sub rsp, 8
    12 00000069 F20F110C24          <1> movsd [rsp], %1
    38                                  XMM_POP xmm0 ; save return value to xmm0
     7 0000006E F20F100424          <1> movsd %1, [rsp]
     8 00000073 4883C408            <1> add rsp, 8
    39 00000077 C9                      leave
    40 00000078 C3                      ret
    41                                  
    42                                  IF_LABEL_0:
    43                                  
    44 00000079 F20F104D10              movsd xmm1, [rbp + 8 + 8]             ; seed
    45                                  XMM_PUSH xmm1
    11 0000007E 4883EC08            <1> sub rsp, 8
    12 00000082 F20F110C24          <1> movsd [rsp], %1
    46 00000087 F20F104D10              movsd xmm1, [rbp + 8 + 8]             ; seed
    47                                  XMM_PUSH xmm1
    11 0000008C 4883EC08            <1> sub rsp, 8
    12 00000090 F20F110C24          <1> movsd [rsp], %1
    48 00000095 48B8000000000000F0-     mov rax, __float64__(1.000000)
    48 0000009E 3F                 
    49 0000009F 66480F6EC8              movq xmm1, rax
    50                                  XMM_PUSH xmm1
    11 000000A4 4883EC08            <1> sub rsp, 8
    12 000000A8 F20F110C24          <1> movsd [rsp], %1
    51                                  XMM_POP xmm2
     7 000000AD F20F101424          <1> movsd %1, [rsp]
     8 000000B2 4883C408            <1> add rsp, 8
    52                                  XMM_POP xmm1
     7 000000B6 F20F100C24          <1> movsd %1, [rsp]
     8 000000BB 4883C408            <1> add rsp, 8
    53 000000BF F20F5CCA                subsd xmm1, xmm2
    54                                  XMM_PUSH xmm1
    11 000000C3 4883EC08            <1> sub rsp, 8
    12 000000C7 F20F110C24          <1> movsd [rsp], %1
    55 000000CC E83FFFFFFF              call feed
    56 000000D1 4883C408                add rsp, 8
    57                                  XMM_PUSH xmm0; returned value
    11 000000D5 4883EC08            <1> sub rsp, 8
    12 000000D9 F20F110424          <1> movsd [rsp], %1
    58                                  XMM_POP xmm2
     7 000000DE F20F101424          <1> movsd %1, [rsp]
     8 000000E3 4883C408            <1> add rsp, 8
    59                                  XMM_POP xmm1
     7 000000E7 F20F100C24          <1> movsd %1, [rsp]
     8 000000EC 4883C408            <1> add rsp, 8
    60 000000F0 F20F59CA                mulsd xmm1, xmm2
    61                                  XMM_PUSH xmm1
    11 000000F4 4883EC08            <1> sub rsp, 8
    12 000000F8 F20F110C24          <1> movsd [rsp], %1
    62                                  XMM_POP xmm0 ; save return value to xmm0
     7 000000FD F20F100424          <1> movsd %1, [rsp]
     8 00000102 4883C408            <1> add rsp, 8
    63 00000106 C9                      leave
    64 00000107 C3                      ret
    65                                  
    66                                  feed_END:
    67                                  
    68 00000108 48B800000000000000-     mov rax, __float64__(2.000000)
    68 00000111 40                 
    69 00000112 66480F6EC8              movq xmm1, rax
    70                                  XMM_PUSH xmm1
    11 00000117 4883EC08            <1> sub rsp, 8
    12 0000011B F20F110C24          <1> movsd [rsp], %1
    71 00000120 E8EBFEFFFF              call feed
    72 00000125 4883C408                add rsp, 8
    73                                  XMM_PUSH xmm0; returned value
    11 00000129 4883EC08            <1> sub rsp, 8
    12 0000012D F20F110424          <1> movsd [rsp], %1
    74                                  XMM_POP xmm0
     7 00000132 F20F100424          <1> movsd %1, [rsp]
     8 00000137 4883C408            <1> add rsp, 8
    75 0000013B 4889E0                  mov rax, rsp
    76 0000013E 4883E00F                and rax, 0xF
    77 00000142 4883F808                cmp rax, 8
    78 00000146 7504                    jne .already_aligned_0
    79 00000148 4883EC08                sub rsp, 8
    80                                  .already_aligned_0:
    81 0000014C E8(00000000)            call out
    82                                  ;print feed(..) 
    83                                  
    84 00000151 E8(00000000)            call hlt
    85 00000156 4889EC                  mov rsp, rbp
    86 00000159 5D                      pop rbp
    87 0000015A C3                      ret
