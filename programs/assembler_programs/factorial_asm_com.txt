BITS 64
section .text
global main
extern out
extern hlt
%macro XMM_POP 1
movsd %1, [rsp]
add rsp, 8
%endmacro
%macro XMM_PUSH 1
sub rsp, 8
movsd [rsp], %1
%endmacro


main:
push rbp
mov rbp, rsp
mov rbx, rbp
sub rsp, 8
jmp feed_END
feed:
push rbp             ; save a copy rbp
mov rbp, rsp
sub rsp, 8
movsd xmm1, [rbp + 8 + 8]             ; seed
XMM_PUSH xmm1
mov rax, __float64__(0.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm1
XMM_POP xmm2
comisd xmm2, xmm1
ja IF_LABEL_0
mov rax, __float64__(1.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm0 ; save return value to xmm0
leave
ret

IF_LABEL_0:

movsd xmm1, [rbp + 8 + 8]             ; seed
XMM_PUSH xmm1
mov rax, __float64__(1.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm1
XMM_POP xmm2
comisd xmm2, xmm1
jne IF_LABEL_2
mov rax, __float64__(1.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm0 ; save return value to xmm0
leave
ret

IF_LABEL_2:

movsd xmm1, [rbp + 8 + 8]             ; seed
XMM_PUSH xmm1
movsd xmm1, [rbp + 8 + 8]             ; seed
XMM_PUSH xmm1
mov rax, __float64__(1.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
subsd xmm1, xmm2
XMM_PUSH xmm1
call feed
XMM_PUSH xmm0; returned value
XMM_POP xmm2
XMM_POP xmm1
mulsd xmm1, xmm2
XMM_PUSH xmm1
XMM_POP xmm0 ; save return value to xmm0
leave
ret

feed_END:

mov rax, __float64__(8.000000)
movq xmm1, rax
XMM_PUSH xmm1
call feed
XMM_PUSH xmm0; returned value
XMM_POP xmm0
mov rax, rsp
and rax, 0xF
cmp rax, 8
jne .already_aligned_0
sub rsp, 8
.already_aligned_0:
call out
;print feed(........) 

call hlt
mov rsp, rbp
pop rbp
ret
