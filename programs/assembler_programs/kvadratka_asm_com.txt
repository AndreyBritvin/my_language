BITS 64
section .text
global main
extern out
extern hlt
%macro XMM_POP 1
movsd %1, [rsp]
add rsp, 8
%endmacro
%macro XMM_PUSH 1
sub rsp, 8
movsd [rsp], %1
%endmacro


main:
push rbp
mov rbp, rsp
mov rbx, rbp
sub rsp, 24
mov rax, __float64__(1.000000)
movq xmm1, rax
XMM_PUSH xmm1
mov rax, __float64__(1.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
subsd xmm1, xmm2
XMM_PUSH xmm1
XMM_POP xmm1
movsd [rbx - 24], xmm1             ; no_food
;put in this ^ value: . eat . 

movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
XMM_POP xmm1
movsd [rbx - 16], xmm1             ; left_wing
;put in this ^ value: no_food 

movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
XMM_POP xmm1
movsd [rbx - 8], xmm1             ; right_wing
;put in this ^ value: no_food 

jmp fly_line_END
fly_line:
push rbp             ; save a copy rbp
mov rbp, rsp
sub rsp, 0
movsd xmm1, [rbp + 8 + 16]             ; field
XMM_PUSH xmm1
movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
XMM_POP xmm1
XMM_POP xmm2
comisd xmm2, xmm1
jne IF_LABEL_0
movsd xmm1, [rbp + 8 + 8]             ; grass
XMM_PUSH xmm1
movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
XMM_POP xmm1
XMM_POP xmm2
comisd xmm2, xmm1
jne IF_LABEL_1
mov rax, __float64__(4.000000)
movq xmm1, rax
XMM_PUSH xmm1
mov rax, __float64__(6.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
mulsd xmm1, xmm2
XMM_PUSH xmm1
XMM_POP xmm0 ; save return value to xmm0
leave
ret

IF_LABEL_1:

movsd xmm1, [rbp + 8 + 8]             ; grass
XMM_PUSH xmm1
movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
XMM_POP xmm1
XMM_POP xmm2
comisd xmm2, xmm1
je IF_LABEL_3
movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
XMM_POP xmm0 ; save return value to xmm0
leave
ret

IF_LABEL_3:

IF_LABEL_0:

movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
movsd xmm1, [rbp + 8 + 8]             ; grass
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
subsd xmm1, xmm2
XMM_PUSH xmm1
movsd xmm1, [rbp + 8 + 16]             ; field
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
divsd xmm1, xmm2
XMM_PUSH xmm1
XMM_POP xmm1
movsd [rbx - 16], xmm1             ; left_wing
;put in this ^ value: (no_food eat grass )overeat field 

movsd xmm1, [rbx - 16]             ; left_wing
XMM_PUSH xmm1
XMM_POP xmm1
movsd [rbx - 8], xmm1             ; right_wing
;put in this ^ value: left_wing 

mov rax, __float64__(1.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm0 ; save return value to xmm0
leave
ret

fly_line_END:

jmp fly_square_END
fly_square:
push rbp             ; save a copy rbp
mov rbp, rsp
sub rsp, 8
movsd xmm1, [rbp + 8 + 16]             ; beak
XMM_PUSH xmm1
movsd xmm1, [rbp + 8 + 16]             ; beak
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
mulsd xmm1, xmm2
XMM_PUSH xmm1
mov rax, __float64__(4.000000)
movq xmm1, rax
XMM_PUSH xmm1
movsd xmm1, [rbp + 8 + 24]             ; seed_area
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
mulsd xmm1, xmm2
XMM_PUSH xmm1
movsd xmm1, [rbp + 8 + 8]             ; feather
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
mulsd xmm1, xmm2
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
subsd xmm1, xmm2
XMM_PUSH xmm1
XMM_POP xmm1
movsd [rbp - 8 -0], xmm1             ; parrot_discrimination
;put in this ^ value: beak growth beak eat .... growth seed_area growth feather 

movsd xmm1, [rbp - 8 -0]             ; parrot_discrimination
XMM_PUSH xmm1
XMM_POP xmm0
mov rax, rsp
and rax, 0xF
cmp rax, 8
jne .already_aligned_0
sub rsp, 8
.already_aligned_0:
call out
;print parrot_discrimination 

movsd xmm1, [rbp - 8 -0]             ; parrot_discrimination
XMM_PUSH xmm1
movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
XMM_POP xmm1
XMM_POP xmm2
comisd xmm2, xmm1
jae IF_LABEL_6
movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
XMM_POP xmm0
mov rax, rsp
and rax, 0xF
cmp rax, 8
jne .already_aligned_1
sub rsp, 8
.already_aligned_1:
call out
;print no_food 

movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
XMM_POP xmm0
mov rax, rsp
and rax, 0xF
cmp rax, 8
jne .already_aligned_2
sub rsp, 8
.already_aligned_2:
call out
;print no_food 

movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
XMM_POP xmm0
mov rax, rsp
and rax, 0xF
cmp rax, 8
jne .already_aligned_3
sub rsp, 8
.already_aligned_3:
call out
;print no_food 

movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
XMM_POP xmm0
mov rax, rsp
and rax, 0xF
cmp rax, 8
jne .already_aligned_4
sub rsp, 8
.already_aligned_4:
call out
;print no_food 

movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
XMM_POP xmm0 ; save return value to xmm0
leave
ret

IF_LABEL_6:

movsd xmm1, [rbp - 8 -0]             ; parrot_discrimination
XMM_PUSH xmm1
movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
XMM_POP xmm1
XMM_POP xmm2
comisd xmm2, xmm1
jne IF_LABEL_8
movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
movsd xmm1, [rbp + 8 + 16]             ; beak
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
subsd xmm1, xmm2
XMM_PUSH xmm1
mov rax, __float64__(2.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
divsd xmm1, xmm2
XMM_PUSH xmm1
movsd xmm1, [rbp + 8 + 24]             ; seed_area
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
divsd xmm1, xmm2
XMM_PUSH xmm1
XMM_POP xmm1
movsd [rbx - 16], xmm1             ; left_wing
;put in this ^ value: ((no_food eat beak )overeat .. )overeat seed_area 

movsd xmm1, [rbx - 16]             ; left_wing
XMM_PUSH xmm1
XMM_POP xmm1
movsd [rbx - 8], xmm1             ; right_wing
;put in this ^ value: left_wing 

mov rax, __float64__(1.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm0 ; save return value to xmm0
leave
ret

IF_LABEL_8:

movsd xmm1, [rbp - 8 -0]             ; parrot_discrimination
XMM_PUSH xmm1
movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
XMM_POP xmm1
XMM_POP xmm2
comisd xmm2, xmm1
jbe IF_LABEL_10
movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
movsd xmm1, [rbp + 8 + 16]             ; beak
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
subsd xmm1, xmm2
XMM_PUSH xmm1
movsd xmm1, [rbp - 8 -0]             ; parrot_discrimination
XMM_PUSH xmm1
mov rax, __float64__(1.000000)
movq xmm1, rax
XMM_PUSH xmm1
mov rax, __float64__(2.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
divsd xmm1, xmm2
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
sqrtsd xmm1, xmm1
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
addsd xmm1, xmm2
XMM_PUSH xmm1
mov rax, __float64__(2.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
divsd xmm1, xmm2
XMM_PUSH xmm1
movsd xmm1, [rbp + 8 + 24]             ; seed_area
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
divsd xmm1, xmm2
XMM_PUSH xmm1
XMM_POP xmm1
movsd [rbx - 16], xmm1             ; left_wing
;put in this ^ value: ((no_food eat beak regurgitation parrot_discrimination uncontrolable_growth (. overeat .. ))overeat .. )overeat seed_area 

movsd xmm1, [rbx - 24]             ; no_food
XMM_PUSH xmm1
movsd xmm1, [rbp + 8 + 16]             ; beak
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
subsd xmm1, xmm2
XMM_PUSH xmm1
movsd xmm1, [rbp - 8 -0]             ; parrot_discrimination
XMM_PUSH xmm1
mov rax, __float64__(1.000000)
movq xmm1, rax
XMM_PUSH xmm1
mov rax, __float64__(2.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
divsd xmm1, xmm2
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
sqrtsd xmm1, xmm1
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
subsd xmm1, xmm2
XMM_PUSH xmm1
mov rax, __float64__(2.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
divsd xmm1, xmm2
XMM_PUSH xmm1
movsd xmm1, [rbp + 8 + 24]             ; seed_area
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
divsd xmm1, xmm2
XMM_PUSH xmm1
XMM_POP xmm1
movsd [rbx - 8], xmm1             ; right_wing
;put in this ^ value: ((no_food eat beak eat parrot_discrimination uncontrolable_growth (. overeat .. ))overeat .. )overeat seed_area 

mov rax, __float64__(2.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm0 ; save return value to xmm0
leave
ret

IF_LABEL_10:

mov rax, __float64__(3.000000)
movq xmm1, rax
XMM_PUSH xmm1
mov rax, __float64__(4.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
mulsd xmm1, xmm2
XMM_PUSH xmm1
XMM_POP xmm0 ; save return value to xmm0
leave
ret

fly_square_END:

jmp prepare_for_flight_END
prepare_for_flight:
push rbp             ; save a copy rbp
mov rbp, rsp
sub rsp, 0
movsd xmm1, [rbp + 8 + 24]             ; bowl
XMM_PUSH xmm1
mov rax, __float64__(0.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm1
XMM_POP xmm2
comisd xmm2, xmm1
jne IF_LABEL_12
movsd xmm1, [rbp + 8 + 24]             ; bowl
XMM_PUSH xmm1
movsd xmm1, [rbp + 8 + 16]             ; secret
XMM_PUSH xmm1
movsd xmm1, [rbp + 8 + 8]             ; ZOB
XMM_PUSH xmm1
call fly_line
XMM_PUSH xmm0; returned value
XMM_POP xmm0 ; save return value to xmm0
leave
ret

IF_LABEL_12:

movsd xmm1, [rbp + 8 + 24]             ; bowl
XMM_PUSH xmm1
mov rax, __float64__(0.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm1
XMM_POP xmm2
comisd xmm2, xmm1
je IF_LABEL_14
movsd xmm1, [rbp + 8 + 24]             ; bowl
XMM_PUSH xmm1
movsd xmm1, [rbp + 8 + 16]             ; secret
XMM_PUSH xmm1
movsd xmm1, [rbp + 8 + 8]             ; ZOB
XMM_PUSH xmm1
call fly_square
XMM_PUSH xmm0; returned value
XMM_POP xmm0 ; save return value to xmm0
leave
ret

IF_LABEL_14:

mov rax, __float64__(4.000000)
movq xmm1, rax
XMM_PUSH xmm1
mov rax, __float64__(5.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
mulsd xmm1, xmm2
XMM_PUSH xmm1
XMM_POP xmm0 ; save return value to xmm0
leave
ret

prepare_for_flight_END:

mov rax, __float64__(1.000000)
movq xmm1, rax
XMM_PUSH xmm1
mov rax, __float64__(1.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
subsd xmm1, xmm2
XMM_PUSH xmm1
mov rax, __float64__(5.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm2
XMM_POP xmm1
subsd xmm1, xmm2
XMM_PUSH xmm1
mov rax, __float64__(1.000000)
movq xmm1, rax
XMM_PUSH xmm1
mov rax, __float64__(2.000000)
movq xmm1, rax
XMM_PUSH xmm1
call prepare_for_flight
XMM_PUSH xmm0; returned value
XMM_POP xmm0
mov rax, rsp
and rax, 0xF
cmp rax, 8
jne .already_aligned_5
sub rsp, 8
.already_aligned_5:
call out
;print prepare_for_flight(. eat . eat ....., ., ..) 

movsd xmm1, [rbx - 16]             ; left_wing
XMM_PUSH xmm1
XMM_POP xmm0
mov rax, rsp
and rax, 0xF
cmp rax, 8
jne .already_aligned_6
sub rsp, 8
.already_aligned_6:
call out
;print left_wing 

movsd xmm1, [rbx - 8]             ; right_wing
XMM_PUSH xmm1
XMM_POP xmm0
mov rax, rsp
and rax, 0xF
cmp rax, 8
jne .already_aligned_7
sub rsp, 8
.already_aligned_7:
call out
;print right_wing 

call hlt
mov rsp, rbp
pop rbp
ret
