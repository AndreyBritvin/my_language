push 3
pop bx  
push 1
push 1
sub
pop [0]                    ; no_food
;put in this ^ value: . eat . 

push [0]                   ; no_food
pop [1]                    ; left_wing
;put in this ^ value: no_food 

push [0]                   ; no_food
pop [2]                    ; right_wing
;put in this ^ value: no_food 

jump fly_line_END:
fly_line:
push [bx + 1]              ; field
push [0]                   ; no_food
jne IF_LABEL_0:
push [bx + 2]              ; grass
push [0]                   ; no_food
jne IF_LABEL_1:
push 4
push 6
mul
pop ax; save return value to ax
ret

IF_LABEL_1:

push [bx + 2]              ; grass
push [0]                   ; no_food
je IF_LABEL_3:
push [0]                   ; no_food
pop ax; save return value to ax
ret

IF_LABEL_3:

IF_LABEL_0:

push [0]                   ; no_food
push [bx + 2]              ; grass
sub
push [bx + 1]              ; field
div
pop [1]                    ; left_wing
;put in this ^ value: (no_food eat grass )overeat field 

push [1]                   ; left_wing
pop [2]                    ; right_wing
;put in this ^ value: left_wing 

push 1
pop ax; save return value to ax
ret

fly_line_END:

jump fly_square_END:
fly_square:
push [bx + 1]              ; beak
push [bx + 1]              ; beak
mul
push 4
push [bx + 0]              ; seed_area
mul
push [bx + 2]              ; feather
mul
sub
pop [bx + 3]               ; parrot_discrimination
;put in this ^ value: beak growth beak eat .... growth seed_area growth feather 

push [bx + 3]              ; parrot_discrimination
out
;print parrot_discrimination 

push [bx + 3]              ; parrot_discrimination
push [0]                   ; no_food
jae IF_LABEL_6:
push [0]                   ; no_food
out
;print no_food 

push [0]                   ; no_food
out
;print no_food 

push [0]                   ; no_food
out
;print no_food 

push [0]                   ; no_food
out
;print no_food 

push [0]                   ; no_food
pop ax; save return value to ax
ret

IF_LABEL_6:

push [bx + 3]              ; parrot_discrimination
push [0]                   ; no_food
jne IF_LABEL_8:
push [0]                   ; no_food
push [bx + 1]              ; beak
sub
push 2
div
push [bx + 0]              ; seed_area
div
pop [1]                    ; left_wing
;put in this ^ value: ((no_food eat beak )overeat .. )overeat seed_area 

push [1]                   ; left_wing
pop [2]                    ; right_wing
;put in this ^ value: left_wing 

push 1
pop ax; save return value to ax
ret

IF_LABEL_8:

push [bx + 3]              ; parrot_discrimination
push [0]                   ; no_food
jbe IF_LABEL_10:
push [0]                   ; no_food
push [bx + 1]              ; beak
sub
push [bx + 3]              ; parrot_discrimination
push 1
push 2
div
power
add
push 2
div
push [bx + 0]              ; seed_area
div
pop [1]                    ; left_wing
;put in this ^ value: ((no_food eat beak regurgitation parrot_discrimination uncontrolable_growth (. overeat .. ))overeat .. )overeat seed_area 

push [0]                   ; no_food
push [bx + 1]              ; beak
sub
push [bx + 3]              ; parrot_discrimination
push 1
push 2
div
power
sub
push 2
div
push [bx + 0]              ; seed_area
div
pop [2]                    ; right_wing
;put in this ^ value: ((no_food eat beak eat parrot_discrimination uncontrolable_growth (. overeat .. ))overeat .. )overeat seed_area 

push 2
pop ax; save return value to ax
ret

IF_LABEL_10:

push 3
push 4
mul
pop ax; save return value to ax
ret

fly_square_END:

jump prepare_for_flight_END:
prepare_for_flight:
push [bx + 0]              ; bowl
push 0
jne IF_LABEL_12:
push bx; save a copy
push [bx + 0]              ; bowl
push [bx + 1]              ; secret
push [bx + 2]              ; ZOB
push bx + 3
pop  bx 
pop [bx + 2]
pop [bx + 1]
pop [bx + 0]
dump
call fly_line:
pop bx; push copy back
push ax; returned value
pop ax; save return value to ax
ret

IF_LABEL_12:

push [bx + 0]              ; bowl
push 0
je IF_LABEL_14:
push bx; save a copy
push [bx + 0]              ; bowl
push [bx + 1]              ; secret
push [bx + 2]              ; ZOB
push bx + 3
pop  bx 
pop [bx + 2]
pop [bx + 1]
pop [bx + 0]
dump
call fly_square:
pop bx; push copy back
push ax; returned value
pop ax; save return value to ax
ret

IF_LABEL_14:

push 4
push 5
mul
pop ax; save return value to ax
ret

prepare_for_flight_END:

push bx; save a copy
push 1
push 1
sub
push 5
sub
push 1
push 2
pop [bx + 2]
pop [bx + 1]
pop [bx + 0]
dump
call prepare_for_flight:
pop bx; push copy back
push ax; returned value
out
;print prepare_for_flight(. eat . eat ....., ., ..) 

push [1]                   ; left_wing
out
;print left_wing 

push [2]                   ; right_wing
out
;print right_wing 

hlt
