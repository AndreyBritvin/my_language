BITS 64
section .text
global main
extern out
extern hlt
%macro XMM_POP 1
movsd %1, [rsp]
add rsp, 8
%endmacro
%macro XMM_PUSH 1
sub rsp, 8
movsd [rsp], %1
%endmacro


main:
push rbp
mov rbp, rsp
sub rsp, 8
mov rax, __float64__(10.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm1
movsd [rbp - 8], xmm1             ; first
;put in this ^ value: .......... 

movsd xmm1, [rbp - 8]             ; first
XMM_PUSH xmm1
mov rax, __float64__(3.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm1
XMM_POP xmm2
comisd xmm2, xmm1
jbe IF_LABEL_0
mov rax, __float64__(2.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm0
mov rax, rsp
and rax, 0xF
cmp rax, 8
jne .already_aligned_0
sub rsp, 8
.already_aligned_0:
call out
;print .. 

IF_LABEL_0:

movsd xmm1, [rbp - 8]             ; first
XMM_PUSH xmm1
mov rax, __float64__(2.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm1
XMM_POP xmm2
comisd xmm2, xmm1
jae IF_LABEL_2
mov rax, __float64__(1.000000)
movq xmm1, rax
XMM_PUSH xmm1
XMM_POP xmm0
mov rax, rsp
and rax, 0xF
cmp rax, 8
jne .already_aligned_1
sub rsp, 8
.already_aligned_1:
call out
;print . 

IF_LABEL_2:

call hlt
mov rsp, rbp
pop rbp
ret
