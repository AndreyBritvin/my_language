push 3

pop bx  

push 1

push 1

sub

pop [0] 



push [0] 
pop [1] 



push [0] 
pop [2] 



jump fly_line_END:

fly_line:

push [bx + 1] 
push [0] 
jne IF_LABEL_0:

push [bx + 2] 
push [0] 
jne IF_LABEL_1:

push 4

push 6

mul

pop ax
ret



IF_LABEL_1:



push [bx + 2] 
push [0] 
je IF_LABEL_3:

push [0] 
pop ax
ret



IF_LABEL_3:



IF_LABEL_0:



push [0] 
push [bx + 2] 
sub

push [bx + 1] 
div

pop [1] 



push [1] 
pop [2] 



push 1

pop ax
ret



fly_line_END:



jump fly_square_END:

fly_square:

push [bx + 1] 
push [bx + 1] 
mul

push 4

push [bx + 0] 
mul

push [bx + 2] 
mul

sub

pop [bx + 3] 



push [bx + 3] 
out




push [bx + 3] 
push [0] 
jae IF_LABEL_6:

push [0] 
out




push [0] 
out




push [0] 
out




push [0] 
out




push [0] 
pop ax
ret



IF_LABEL_6:



push [bx + 3] 
push [0] 
jne IF_LABEL_8:

push [0] 
push [bx + 1] 
sub

push 2

div

push [bx + 0] 
div

pop [1] 



push [1] 
pop [2] 



push 1

pop ax
ret



IF_LABEL_8:



push [bx + 3] 
push [0] 
jbe IF_LABEL_10:

push [0] 
push [bx + 1] 
sub

push [bx + 3] 
push 1

push 2

div

power

add

push 2

div

push [bx + 0] 
div

pop [1] 



push [0] 
push [bx + 1] 
sub

push [bx + 3] 
push 1

push 2

div

power

sub

push 2

div

push [bx + 0] 
div

pop [2] 



push 2

pop ax
ret



IF_LABEL_10:



push 3

push 4

mul

pop ax
ret



fly_square_END:



jump prepare_for_flight_END:

prepare_for_flight:

push [bx + 0] 
push 0

jne IF_LABEL_12:

push bx
push [bx + 0] 
push [bx + 1] 
push [bx + 2] 
push bx + 3

pop  bx 

pop [bx + 2]

pop [bx + 1]

pop [bx + 0]

dump

call fly_line:

pop bx
push ax
pop ax
ret



IF_LABEL_12:



push [bx + 0] 
push 0

je IF_LABEL_14:

push bx
push [bx + 0] 
push [bx + 1] 
push [bx + 2] 
push bx + 3

pop  bx 

pop [bx + 2]

pop [bx + 1]

pop [bx + 0]

dump

call fly_square:

pop bx
push ax
pop ax
ret



IF_LABEL_14:



push 4

push 5

mul

pop ax
ret



prepare_for_flight_END:



push bx
push 2

push 1

push 11

sub

push 12

pop [bx + 2]

pop [bx + 1]

pop [bx + 0]

dump

call prepare_for_flight:

pop bx
push ax
out




push [1] 
out




push [2] 
out




hlt

