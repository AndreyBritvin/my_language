push 6

pop bx  

push 1

push 1

sub

pop [0]                    



push 1

push 1

sub

pop [1]                    



push 1

push 1

sub

pop [2]                    



push 1

push 1

sub

pop [3]                    



push 1

push 1

sub

pop [4]                    



push 1

push 1

sub

pop [5]                    



push 1

push 1

sub

push 5

sub

pop [0]                    



push 1

pop [1]                    



push 2

pop [2]                    



jump LINEAR_END:

LINEAR:

push [bx + 1]              
push 1

push 1

sub

jne IF_LABEL_0:

push [bx + 0]              
push 1

push 1

sub

jne IF_LABEL_1:

push 5

pop ax
ret



IF_LABEL_1:



push 1

push 1

sub

pop ax
ret



IF_LABEL_0:



push [bx + 0]              
push [bx + 1]              
div

pop [3]                    



push 1

pop ax
ret



LINEAR_END:



jump SQSOLVER_END:

SQSOLVER:

push [bx + 2]              
push 1

push 1

sub

jne IF_LABEL_4:

push bx
push [bx + 0]              
push [bx + 1]              
push bx + 4

pop  bx 

pop [bx + 1]

pop [bx + 0]

dump

call LINEAR:

pop bx
push ax
pop ax
ret



IF_LABEL_4:



push 1

push 1

sub

pop [bx + 3]               



push [bx + 1]              
push [bx + 1]              
mul

push [bx + 0]              
push [bx + 2]              
mul

push 4

mul

sub

pop [bx + 3]               



push [bx + 3]              
push 1

push 1

sub

jne IF_LABEL_6:

push 1

push 1

sub

push [bx + 1]              
push 2

div

sub

pop [3]                    



push 1

pop ax
ret



IF_LABEL_6:



push [bx + 3]              
push 1

push 1

sub

jbe IF_LABEL_8:

push [bx + 3]              
push 1

push 2

div

power

pop [bx + 3]               



push 1

push 1

sub

push [bx + 1]              
push [bx + 3]              
add

push 2

push [bx + 2]              
mul

div

sub

pop [3]                    



push 1

push 1

sub

push [bx + 1]              
push [bx + 3]              
sub

push 2

push [bx + 2]              
mul

div

sub

pop [4]                    



push 2

pop ax
ret



IF_LABEL_8:



push [bx + 3]              
pop ax
ret



SQSOLVER_END:



push bx
push [2]                   
push [1]                   
push [0]                   
pop [bx + 2]

pop [bx + 1]

pop [bx + 0]

dump

call SQSOLVER:

pop bx
push ax
pop [5]                    



push [5]                   
out




push [3]                   
out




push [4]                   
out




hlt

