push 3
pop bx  
push 1
push 2
push 1
div
sub
pop [0] ; x

push [0] ; x
out

push [0] ; x
push 1
jbe IF_LABEL_0:
push [2] ; Y
pop [1] ; y

WHILE_LABEL_0:
push [0] ; x
push 2
jae END_WHILE_0:
push [1] ; y
out

push [0] ; x
push 1
sub
pop [0] ; x

jump WHILE_LABEL_0:
END_WHILE_0:

IF_LABEL_0:

jump sada_END:
sada:
push bx 
push 0
add     
pop  bx 
push [0] ; x
out

push [0] ; x
push 2
sub
pop ax
ret

sada_END:

jump cheek_END:
cheek:
push bx 
push 2
add     
pop  bx 
push 1
pop [bx + 1] ; local_v

push [bx + 0] ; a
out

push 2
push 1
sub
pop ax
ret

cheek_END:

jump cheek_m_END:
cheek_m:
push bx 
push 4
add     
pop  bx 
push [0] ; x
out

push 3
push 4
sub
pop ax
ret

cheek_m_END:

push bx
push 1
pop [bx + 0]
push 2
pop [bx + 1]
push [0] ; x
pop [bx + 2]
call cheek:
pop bx
push ax
push bx
push 1
pop [bx + 0]
push 2
pop [bx + 1]
push [0] ; x
pop [bx + 2]
call cheek:
pop bx
push ax
out

hlt
